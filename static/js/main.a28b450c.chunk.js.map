{"version":3,"sources":["App.constants.ts","Axis.service.ts","PlanetChart.tsx","ControlPanel.actions.ts","Axis.tsx","ControlPanel.reducer.ts","ControlPanel.tsx","Theme.actions.ts","Theme.reducer.ts","themes/base.ts","themes/light.ts","themes/dark.ts","App.tsx","serviceWorker.ts","App.reducer.ts","index.tsx"],"names":["AXIS_GROUPS","category","axes","label","attribute","units","type","getLabelFromKey","axisAttribute","matchingAxis","some","axisGroup","filter","axisOption","length","PlanetChart","props","internalChart","chartOptions","planets","xAxis","this","controlPanel","yAxis","selectedColorCategory","colorCategory","colorCategories","map","p","value","index","self","indexOf","chart","backgroundColor","theme","palette","background","default","legend","itemStyle","color","text","primary","plotOptions","scatter","marker","radius","states","hover","enabled","tooltip","headerFormat","pointFormat","series","name","data","Number","highcharts","Highcharts","options","React","Component","connect","state","ControlPanelActionTypes","useStyles","makeStyles","createStyles","root","flexGrow","formControl","margin","spacing","minWidth","selectEmpty","marginTop","dispatch","handleAxisChange","key","stateKey","renderSubList","axis","MenuItem","classes","className","FormControl","InputLabel","id","axisLabel","Select","labelId","onChange","event","target","ListSubheader","initialState","elementContainer","flexDirection","justifyContent","ControlPanel","Grid","container","justify","direction","selectedValue","ThemeActionTypes","appTheme","localStorage","getItem","themeChecked","themeReducer","action","console","info","newState","getThemeByName","themeKey","createMuiTheme","themeMap","typography","body1","fontSize","breakpoints","up","lightTheme","main","darkTheme","padding","header","minHeight","headerName","appWrapper","display","boxItem","darkIcon","borderRadius","lightIcon","withTheme","useReducer","initialThemeState","themeState","themeDispatch","CssBaseline","item","xs","Switch","checked","icon","aria-label","checkedIcon","inputProps","Box","confiredExoplanets","Boolean","window","location","hostname","match","appReducer","combineReducers","log","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a28b450c.chunk.js","sourcesContent":["import { AxisGroup } from \"./AxisOption.interface\";\n\nexport const AXIS_GROUPS: AxisGroup[] = [\n    {\n        category: \"Planet\",\n        axes: [{\n            label: \"Planet's Mass\",\n            attribute: \"pl_bmassj\",\n            units: \"Jupiter Masses\",\n            type: \"Numeric\"\n        }, {\n            label: \"Planet's Radius\",\n            attribute: \"pl_radj\",\n            units: \"Jupiter Radii\",\n            type: \"Numeric\"\n        }, {\n            label: \"Planet's Density\",\n            attribute: \"pl_dens\",\n            units: \"g/cmÂ³\",\n            type: \"Numeric\"\n        }, {\n            label: \"Planet's Orbital Eccentricity\",\n            attribute: \"pl_orbeccen\",\n            units: null,\n            type: \"Numeric\"\n        }, {\n            label: \"Planet's Orbital Inclination\",\n            attribute: \"pl_orbincl\",\n            units: null,\n            type: \"Numeric\"\n        }, {\n            label: \"Number of Planets in System\",\n            attribute: \"pl_pnum\",\n            units: null,\n            type: \"Numeric\"\n        }, {\n            label: \"Planet's Orbital Period\",\n            attribute: \"pl_orbper\",\n            units: \"Days\",\n            type: \"Numeric\"\n        }, {\n            label: \"Planet's Orbital Period Error 1\",\n            attribute: \"pl_orbpererr1\",\n            units: \"Days\",\n            type: \"Numeric\"\n        }, {\n            label: \"Planet's Orbital Period Error 2\",\n            attribute: \"pl_orbpererr2\",\n            units: \"Days\",\n            type: \"Numeric\"\n        }, {\n            label: \"Planet's Orbital Period Limit Flag\",\n            attribute: \"pl_orbperlim\",\n            units: null,\n            type: \"Numeric\"\n        }, {\n            label: \"Planet's Orbital Period # of Measurements\",\n            attribute: \"pl_orbpern\",\n            units: null,\n            type: \"Numeric\"\n        }]\n    }, {\n        category: \"Star\",\n        axes: [{\n            label: \"Stellar Distance\",\n            attribute: \"st_dist\",\n            units: \"Light Years\",\n            type: \"Numeric\"\n        }, {\n            label: \"Stellar Mass\",\n            attribute: \"st_mass\",\n            units: \"Solar Masses\",\n            type: \"Numeric\"\n        }, {\n            label: \"Stellar Radius\",\n            attribute: \"st_rad\",\n            units: \"Solar Radii\",\n            type: \"Numeric\"\n        }, {\n            label: \"Stellar Optical Magnitude\",\n            attribute: \"st_optmag\",\n            units: \"mag\",\n            type: \"Numeric\"\n        }, {\n            label: \"Right Ascension\",\n            attribute: \"ra\",\n            units: null,\n            type: \"Numeric\"\n        }, {\n            label: \"Declination\",\n            attribute: \"dec\",\n            units: null,\n            type: \"Numeric\"\n        }]\n    }, {\n        category: \"Discovery\",\n        axes: [{\n            label: \"Satellite/Observatory\",\n            attribute: \"pl_facility\",\n            units: null,\n            type: \"Categorical\"\n        }, {\n            label: \"Discovery Year\",\n            attribute: \"rowupdate\", // TODO: Not sure if this is right\n            units: null,\n            type: \"Numeric\"\n        }]\n    }\n];\n","import { AXIS_GROUPS } from './App.constants';\nimport { AxisOption, AxisGroup } from './AxisOption.interface';\nimport { Planet } from './Planet.interface';\n\nexport function getLabelFromKey (axisAttribute: string):AxisOption  {\n    let matchingAxis: AxisOption[] = [];\n    AXIS_GROUPS.some((axisGroup: AxisGroup) => {\n        matchingAxis = axisGroup.axes.filter((axisOption: AxisOption) => {\n            return axisOption.attribute === axisAttribute;\n        });\n        if(matchingAxis.length) {\n            return true;\n        }\n    });\n    return matchingAxis[0];\n\n}\n\nexport function getCategories(planets: Planet[], axisAttribute: string): string[] {\n    return planets.map(p => p[axisAttribute])\n        .filter((value, index, self) => self.indexOf(value) === index);\n}","import React, { useContext } from 'react';\n\nimport * as Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\n\nimport { Planet } from './Planet.interface';\nimport { AxisOption } from './AxisOption.interface';\nimport { Theme } from '@material-ui/core';\nimport { ControlPanelState } from './ControlPanel.interface';\nimport { connect } from 'react-redux';\nimport { getLabelFromKey, getCategories } from './Axis.service';\n\ninterface PlanetProps {\n  theme: Theme,\n  planets: Planet [],\n  axisProps: {\n    x: AxisOption, y: AxisOption\n  },\n  controlPanel: ControlPanelState\n};\n\nexport class PlanetChart extends React.Component<PlanetProps> {\n  internalChart: Highcharts.Chart | any;\n\n  chartOptions: Highcharts.Options = {}\n\n  constructor(props: PlanetProps) {\n    super(props);\n\n  }\n  \n  render() {\n    const xAxis: AxisOption = getLabelFromKey(this.props.controlPanel.xAxis);\n    const yAxis: AxisOption = getLabelFromKey(this.props.controlPanel.yAxis);\n    const selectedColorCategory: string = this.props.controlPanel.colorCategory;\n    const colorCategories: string[] = getCategories(this.props.planets, selectedColorCategory);\n    this.chartOptions = {\n      chart: {\n        type: 'scatter',\n        backgroundColor: this.props.theme.palette.background.default\n      },\n      legend: {\n        itemStyle: {\n          color: this.props.theme.palette.text.primary\n        }\n      },\n      // title: {\n      //   text: `${xAxis.label} vs ${yAxis.label}`,\n      //   style: {\n      //     color: this.props.theme.palette.text.primary\n      //   },\n      //   margin: 25\n      // },\n      // subtitle: {\n      //   text: `<a style=\"color: ${this.props.theme.palette.text.primary}; margin: 20px;\" href=\"https://exoplanetarchive.ipac.caltech.edu/\" target=\"_blank\">exoplanetarchive.ipac.caltech.edu</a>`,\n      //   useHTML: true,\n      // },\n      plotOptions: {\n        scatter: {\n          marker: {\n            radius: 2,\n            states: {\n              hover: {\n                enabled: true,\n              }\n            }\n          },\n          tooltip: {\n            headerFormat: '<b>{series.name}</b><br>',\n            pointFormat: `{point.x} ${xAxis.units}, {point.y} ${yAxis.units}`\n          }\n        }\n      },\n      series: colorCategories.map((colorCategory) => {\n        return {\n          type: 'scatter',\n          name: colorCategory,\n          data: this.props.planets\n            .filter(p => p[xAxis.attribute] && p[yAxis.attribute]) //filters out null values\n            .filter(p => p[selectedColorCategory] === colorCategory)\n            .map((p) => {\n              const x: number = Number(p[xAxis.attribute]);\n              const y: number = Number(p[yAxis.attribute]);\n              return [x, y];\n            })\n        };\n      })\n    };\n    return (\n      <div>\n        <HighchartsReact\n          highcharts={Highcharts}\n          options={this.chartOptions}/>\n      </div>\n    );\n  }\n\n}\n\n \n \nconst mapStateToProps = (state: ControlPanelState, props: any) => ({\n  ...state,\n  ...props\n});\n\n\n\nexport default connect(mapStateToProps)(PlanetChart)","export const ControlPanelActionTypes = {\n    changeAxis: 'CHANGE_AXIS'\n}","import React, { useReducer } from 'react';\nimport { connect } from 'react-redux';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\n\nimport { AXIS_GROUPS } from './App.constants';\nimport { AxisGroup, AxisOption } from './AxisOption.interface';\n\n\nimport { makeStyles, createStyles, Theme, ListSubheader, ListItem } from '@material-ui/core';\nimport { controlPanelReducer, initialState as initialControlPanelState } from './ControlPanel.reducer';\nimport { ControlPanelActionTypes } from './ControlPanel.actions';\nimport { ControlPanelState } from './ControlPanel.interface';\n// import { appReducer } from './App.reducer';\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            flexGrow: 1\n        },\n        formControl: {\n            margin: theme.spacing(1),\n            minWidth: 120,\n        },\n        selectEmpty: {\n            marginTop: theme.spacing(2),\n        },\n    }),\n);\n\n// interface ControlPanelProps {\n//     axisLabel: string;\n//     selectedValue: string;\n//     stateKey: string;\n// }\n\ninterface ConnectedControlPanelProps {\n    axisLabel: string;\n    controlPanel: ControlPanelState;\n    handleAxisChange: Function;\n    selectedValue: string;\n    stateKey: string;\n    type: string;\n}\n\nconst Axis:React.FC<ConnectedControlPanelProps> = (props) => {\n    \n    const renderSubList = (axisGroup: AxisGroup, type: string) => {\n        if(!axisGroup) { return []; }\n        const menuItems = axisGroup.axes\n            .filter((axis: AxisOption) => (axis.type === type))\n            .map((axis: AxisOption) => (\n                <MenuItem key={`${axisGroup.category}-${axis.attribute}`} value={axis.attribute}>{axis.label}</MenuItem>\n            ));\n        return menuItems;\n    };\n\n    const classes = useStyles();\n    return (\n        <div className={classes.root}>\n            <FormControl className={classes.formControl}>\n                <InputLabel id=\"demo-simple-select-label\">{props.axisLabel}</InputLabel>\n                <Select\n                    labelId=\"axis-select-label\"\n                    id=\"axis-select\"\n                    value={props.controlPanel[props.stateKey]}\n                    onChange={event => props.handleAxisChange(event.target.value as string)}>\n                        {AXIS_GROUPS.map((axisGroup: AxisGroup) => ([\n                        <ListSubheader key={axisGroup.category}>{axisGroup.category}</ListSubheader>,\n                        [...renderSubList(axisGroup, props.type)]\n                        ])\n                )}\n                </Select>\n            </FormControl>\n        </div>\n    );\n}\n\nconst mapStateToProps = (state: ControlPanelState, props: any) => ({\n    ...state,\n    ...props    \n});\n\nconst mapDispatchToProps = (dispatch: Function, props: any) => ({\n    handleAxisChange: (attribute: string): void => { \n        dispatch({\n            type: ControlPanelActionTypes.changeAxis,\n            key: props.stateKey,\n            value: attribute\n        });\n    }\n});\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Axis);","import { ControlPanelActionTypes } from './ControlPanel.actions';\nimport { ControlPanelState } from './ControlPanel.interface';\nimport { AXIS_GROUPS } from './App.constants';\n\n\nexport const initialState: ControlPanelState = {\n    xAxis: AXIS_GROUPS[0].axes[0].attribute,\n    yAxis: AXIS_GROUPS[1].axes[0].attribute,\n    colorCategory: AXIS_GROUPS[2].axes[0].attribute\n};\n\nexport function controlPanelReducer(state: ControlPanelState = initialState, action: any): ControlPanelState {\n  console.log('controlPanelReducer: ', state, action);\n    switch(action.type) {\n      case ControlPanelActionTypes.changeAxis:\n        const newState = {\n          ...state,\n        };\n        newState[action.key] = action.value;\n        console.log('controlPanelReducer: ', state, newState);\n        return newState;\n      default:\n        return state;\n        // throw new Error();\n    };\n}","import React from 'react';\n\nimport { makeStyles, createStyles, Theme, ListSubheader, ListItem, Grid } from '@material-ui/core';\nimport { AXIS_GROUPS } from './App.constants';\nimport Axis from './Axis';\nimport { initialState } from './ControlPanel.reducer';\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {},\n    elementContainer: {\n      flexDirection: 'row',\n      justifyContent: 'space-between'\n    },\n    formControl: {\n      margin: theme.spacing(1),\n      minWidth: 120,\n    },\n    selectEmpty: {\n      marginTop: theme.spacing(2),\n    },\n  }),\n);\n\n\n\nexport function ControlPanel() {\n\n\n  const classes = useStyles();\n  if (!AXIS_GROUPS) return null;\n  return (\n    <Grid container className={classes.root} justify=\"space-between\">\n      <Grid container className={classes.elementContainer} direction=\"column\" justify=\"space-between\">\n        <Axis type=\"Categorical\" stateKey=\"colorCategory\" selectedValue={initialState.colorCategory} axisLabel={'Color'}/>\n      </Grid>\n      <Grid container className={classes.elementContainer} direction=\"column\" justify=\"space-between\">\n        <Axis type=\"Numeric\" stateKey=\"xAxis\" selectedValue={initialState.xAxis} axisLabel={'X Axis'}/>\n        <Axis type=\"Numeric\" stateKey=\"yAxis\" selectedValue={initialState.yAxis} axisLabel={'Y Axis'}/>\n      </Grid>\n    </Grid>\n  );\n\n\n}\n ","export const ThemeActionTypes = {\n    toggleTheme: 'TOGGLE_THEME'\n}","import { ThemeState } from './Theme.interface';\nimport { ThemeActionTypes } from './Theme.actions';\n\nexport const initialState: ThemeState = {\n  appTheme: localStorage.getItem('appTheme') || 'darkTheme',\n  themeChecked: false\n};\n\nexport function themeReducer(state: ThemeState = initialState, action: any): ThemeState {\n    console.info('themeReducer', 'state: ', state, 'action: ', action);\n    switch(action.type) {\n      case ThemeActionTypes.toggleTheme:\n        const newState = {\n          ...state,\n          appTheme: state.appTheme === 'darkTheme' ? 'lightTheme' : 'darkTheme',\n          themeChecked: !state.themeChecked\n        };\n        return newState;\n      default:\n        return state;\n        // throw new Error();\n    };\n};","import { Theme, createMuiTheme, ThemeOptions } from \"@material-ui/core\";\nimport { lightTheme } from \"./light\";\nimport { darkTheme } from \"./dark\";\n\nexport function getThemeByName(themeKey: string): Theme {\n  const theme: Theme = createMuiTheme({\n    ...themeMap[themeKey],\n    typography: {\n    }\n  });\n\n  theme.typography.body1 = {\n\n    fontSize: '0.8rem',\n    [theme.breakpoints.up('md')]: {\n      fontSize: '1rem',\n    },\n  }\n\n  return theme;\n}\n\nconst themeMap: { [key: string]: Partial<ThemeOptions> } = {\n  lightTheme,\n  darkTheme\n};","import { ThemeOptions } from '@material-ui/core';\n\nexport const lightTheme: Partial<ThemeOptions> = {\n  palette: {\n    type: 'light',\n    primary: {\n      main: '#282c34'\n    }\n  }\n};","import { createMuiTheme, ThemeOptions } from '@material-ui/core';\n\nexport const darkTheme: Partial<ThemeOptions> = {\n  palette: {\n    type: 'dark'\n  }\n};","import React, { useState, useContext, useReducer } from 'react';\nimport PlanetChart from './PlanetChart';\n\nimport confiredExoplanets from './confirmed-explanets.json';\nimport { Planet } from './Planet.interface';\nimport { AXIS_GROUPS } from './App.constants';\nimport { ControlPanel } from './ControlPanel';\nimport { makeStyles, createStyles, Theme, Grid, withTheme, Paper, Button, MuiThemeProvider, CssBaseline, Switch, Fab, Box } from '@material-ui/core';\nimport { AppStateContext } from './StateProvider';\nimport WbSunnyRoundedIcon from '@material-ui/icons/WbSunnyRounded';\nimport Brightness3RoundedIcon from '@material-ui/icons/Brightness3Rounded';\nimport { ThemeState } from './Theme.interface';\nimport { themeReducer, initialState as initialThemeState } from './Theme.reducer';\nimport { ThemeActionTypes } from './Theme.actions';\nimport { getThemeByName } from './themes/base';\n// import { appReducer, initialState } from './App.reducer';\nimport { controlPanelReducer, initialState as initialControlPanelState } from './ControlPanel.reducer';\n\nconst lightTheme = getThemeByName('lightTheme');\nconst darkTheme = getThemeByName('darkTheme');\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      fontSize: 'calc(10px + 2vmin)',\n      padding: '1rem'\n    },\n    header: {\n      minHeight: '10vh'\n    },\n    headerName: {\n      padding: '1vh'\n    },\n    appWrapper: {\n      display: 'flex',\n      justifyContent: 'space-between',\n      flexDirection: 'column',\n      [theme.breakpoints.up('md')]: {\n        flexDirection: 'row-reverse'\n      }\n    },\n    boxItem: {\n      margin: '2vw'\n    },\n    darkIcon: {\n      backgroundColor: darkTheme.palette.background.default,\n      borderRadius: '0.75rem',\n      padding: '5px'\n    },\n    lightIcon: {\n      backgroundColor: lightTheme.palette.background.default,\n      borderRadius: '0.75rem',\n      padding: '5px'\n    }\n  }),\n);\n\n\nexport function App(props: { theme: Theme }) {\n\n  const classes = useStyles();\n\n  // const [state, dispatch] = useReducer(appReducer, initialState);\n  const [themeState, themeDispatch] = useReducer(themeReducer, initialThemeState);\n  const theme = getThemeByName(themeState.appTheme);\n\n  return (\n    <MuiThemeProvider theme={theme}>\n      <CssBaseline />\n      <Grid className={classes.root} container direction=\"column\">\n      <Grid item xs={12}>\n        <Grid container className={classes.header} justify=\"space-between\">\n          {/* <Grid>just a spacer</Grid> */}\n          <Grid className={classes.headerName} item xs={6}>\n            Planet Mapper\n          </Grid>\n          <Grid>\n            <Switch\n              checked={themeState.themeChecked}\n              onChange={() => themeDispatch({type: ThemeActionTypes.toggleTheme})}\n              icon={<Brightness3RoundedIcon aria-label=\"Dark Theme\" className={classes.lightIcon} />}\n              checkedIcon={<WbSunnyRoundedIcon color=\"secondary\" aria-label=\"Light Theme\" className={classes.darkIcon} />}\n              color=\"primary\"\n              name=\"themeCheck\"\n              inputProps={{ 'aria-label': 'light and dark theme checkbox' }} />\n            </Grid>\n        </Grid>\n      </Grid>\n      <Box className={classes.appWrapper}>\n          <Box className={classes.boxItem}><ControlPanel /></Box>\n          <Box className={classes.boxItem} flexGrow={1}><PlanetChart planets={confiredExoplanets} theme={theme} /></Box>\n      </Box>\n      </Grid>\n    </MuiThemeProvider>\n  );\n}\n\nexport default withTheme(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { controlPanelReducer, initialState as initialControlState } from './ControlPanel.reducer';\nimport { themeReducer, initialState as initialThemeState } from './Theme.reducer';\nimport { combineReducers } from 'redux';\n\nexport const initialState: any = {\n  theme: initialThemeState,\n  controlPanel: initialControlState\n}\n\n// This is the combined app-wide reducer containing the full state tree\nexport const appReducer = combineReducers({\n  theme: themeReducer, controlPanel: controlPanelReducer\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { CssBaseline } from '@material-ui/core';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { StateProvider, AppStateContext } from './StateProvider';\n\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\n\nimport { appReducer } from './App.reducer';\n\nconst store = createStore(appReducer)\n\nReactDOM.render(\n    <Provider store={store}>\n      <App />\n    </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}