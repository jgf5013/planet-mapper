{"version":3,"sources":["PlanetChart.tsx","App.constants.ts","Axis.tsx","ControlPanel.tsx","App.actions.ts","App.reducer.ts","StateProvider.tsx","themes/base.ts","themes/light.ts","themes/dark.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["PlanetChart","props","internalChart","chartOptions","afterChartCreated","bind","console","log","this","addSeries","type","name","data","planets","map","p","Number","axisProps","x","attribute","y","chart","backgroundColor","theme","palette","background","default","legend","itemStyle","color","primary","contrastText","title","text","label","style","margin","subtitle","useHTML","plotOptions","scatter","marker","radius","states","hover","enabled","tooltip","headerFormat","pointFormat","units","highcharts","Highcharts","options","callback","React","Component","AXIS_OPTIONS","category","axes","useStyles","makeStyles","createStyles","root","flexGrow","formControl","spacing","minWidth","selectEmpty","marginTop","Axis","useState","axis","setAxis","renderSubList","axisGroup","MenuItem","key","value","classes","className","FormControl","InputLabel","id","axisLabel","Select","labelId","onChange","event","target","ListSubheader","initialState","xAxis","yAxis","ControlPanel","Grid","container","justify","AppActionTypes","appTheme","localStorage","getItem","appReducer","state","action","info","Error","AppStateContext","createContext","StateProvider","children","useReducer","Provider","themeMap","lightTheme","main","darkTheme","fontSize","padding","header","minHeight","appWrapper","display","justifyContent","flexDirection","breakpoints","up","withTheme","useContext","dispatch","themeKey","createMuiTheme","typography","body1","getThemeByName","CssBaseline","direction","item","xs","aria-label","onClick","confiredExoplanets","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9a1209ab.chunk.js","sourcesContent":["import React, { useContext } from 'react';\n\nimport * as Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\n\nimport { Planet } from './Planet.interface';\nimport { AxisOption } from './AxisOption.interface';\nimport { withTheme, Theme } from '@material-ui/core';\ninterface PlanetProps {\n  theme: Theme,\n  planets: Planet [],\n  axisProps: {\n    x: AxisOption, y: AxisOption\n  }\n};\n\nexport class PlanetChart extends React.Component<PlanetProps> {\n  internalChart: Highcharts.Chart | any;\n\n  chartOptions: Highcharts.Options = {}\n\n  constructor(props: PlanetProps) {\n    super(props);\n    this.afterChartCreated = this.afterChartCreated.bind(this);\n  }\n\n  componentDidMount() {\n    console.log('props: ', this.props);\n    this.internalChart.addSeries({\n      type: 'scatter',\n      name: 'Confirmed Planets',\n      data: this.props.planets.map((p) => {\n        const x: number = Number(p[this.props.axisProps.x.attribute]);\n        const y: number = Number(p[this.props.axisProps.y.attribute]);\n        return [x, y];\n      })\n    });\n  }\n\n  afterChartCreated(chart: Highcharts.Chart) {\n    this.internalChart = chart;\n  }\n  \n  render() {\n    this.chartOptions = {\n      chart: {\n        type: 'scatter',\n        backgroundColor: this.props.theme.palette.background.default\n      },\n      legend: {\n        itemStyle: {\n          color: this.props.theme.palette.primary.contrastText\n        }\n      },\n      title: {\n        text: `${this.props.axisProps.x.label} vs ${this.props.axisProps.y.label}`,\n        style: {\n          color: this.props.theme.palette.primary.contrastText\n        },\n        margin: 25\n      },\n      subtitle: {\n        text: `<a style=\"color: ${this.props.theme.palette.primary.contrastText}; margin: 20px;\" href=\"https://exoplanetarchive.ipac.caltech.edu/\" target=\"_blank\">exoplanetarchive.ipac.caltech.edu</a>`,\n        useHTML: true,\n      },\n      plotOptions: {\n        scatter: {\n          marker: {\n            radius: 2,\n            states: {\n              hover: {\n                enabled: true,\n              }\n            }\n          },\n          tooltip: {\n            headerFormat: '<b>{series.name}</b><br>',\n            pointFormat: `{point.x} ${this.props.axisProps.x.units}, {point.y} ${this.props.axisProps.y.units}`\n          }\n        }\n      }\n    };\n    console.log(this.props.theme);\n    return (\n      <div>\n        <HighchartsReact\n          highcharts={Highcharts}\n          options={this.chartOptions}\n          callback={ this.afterChartCreated }/>\n      </div>\n    );\n  }\n\n}\n\n// export default withTheme(PlanetChart);\nexport default PlanetChart;\n \n ","import { AxisOption, AxisGroup } from \"./AxisOption.interface\";\nimport { Theme } from \"@material-ui/core\";\nimport { getThemeByName } from \"./themes/base\";\n\n// export const THEMES: any = {\n//     lightTheme: ,\n//     darkTheme: getThemeByName('darkTheme')\n// }\n\nexport const AXIS_OPTIONS: AxisGroup[] = [\n    {\n        category: \"Planet\",\n        axes: [{\n            label: \"Planet's Mass\",\n            attribute: \"pl_bmassj\",\n            units: \"Jupiter Masses\"\n        }, {\n            label: \"Planet's Orbital Inclination\",\n            attribute: \"pl_orbincl\",\n            units: null\n        }]\n    }, {\n        category: \"Star\",\n        axes: [{\n            label: \"Stellar Distance\",\n            attribute: \"st_dist\",\n            units: \"Light Years\"\n        }]\n    }\n];","import React from 'react';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\n\nimport { AXIS_OPTIONS } from './App.constants';\nimport { AxisGroup, AxisOption } from './AxisOption.interface';\n\n\nimport { makeStyles, createStyles, Theme, ListSubheader, ListItem } from '@material-ui/core';\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n    root: {\n        flexGrow: 1\n    },\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 120,\n    },\n    selectEmpty: {\n        marginTop: theme.spacing(2),\n    },\n    }),\n);\n\n\nexport function Axis(props: {axis: string, axisLabel: string}) {\n    \n    const [axis, setAxis] = React.useState(props.axis);\n    \n    const handleXAxisChange = (attribute: string): void => {\n        setAxis(attribute);\n    };\n    \n    const renderSubList = (axisGroup: AxisGroup) => {\n        if(!axisGroup) { return []; }\n        const menuItems = axisGroup.axes.map((axis: AxisOption) => (\n            <MenuItem key={`${axisGroup.category}-${axis.attribute}`} value={axis.attribute}>{axis.label}</MenuItem>\n        ));\n        return menuItems;\n    };\n\n    const classes = useStyles();\n    return (\n        <div className={classes.root}>\n            <FormControl className={classes.formControl}>\n                <InputLabel id=\"demo-simple-select-label\">{props.axisLabel}</InputLabel>\n                <Select\n                    labelId=\"x-axis-select-label\"\n                    id=\"x-axis-select\"\n                    value={axis}\n                    onChange={event => handleXAxisChange(event.target.value as string)}>\n                        {AXIS_OPTIONS.map((axisGroup: AxisGroup) => ([\n                        <ListSubheader key={axisGroup.category}>{axisGroup.category}</ListSubheader>,\n                        [...renderSubList(axisGroup)]\n                        ])\n                )}\n                </Select>\n            </FormControl>\n        </div>\n    );\n}\n","import React from 'react';\n\n\nimport { makeStyles, createStyles, Theme, ListSubheader, ListItem, Grid } from '@material-ui/core';\nimport { AXIS_OPTIONS } from './App.constants';\nimport { Axis } from './Axis';\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n    },\n    formControl: {\n      margin: theme.spacing(1),\n      minWidth: 120,\n    },\n    selectEmpty: {\n      marginTop: theme.spacing(2),\n    },\n  }),\n);\n\nconst initialState = {\n  xAxis: AXIS_OPTIONS[0].axes[0].attribute,\n  yAxis: AXIS_OPTIONS[1].axes[0].attribute\n}\n\n\nexport function ControlPanel() {\n\n\n  const classes = useStyles();\n  if (!AXIS_OPTIONS) return null;\n  return (\n    <Grid container className={classes.root} justify=\"space-between\">\n      <Axis axis={initialState.xAxis} axisLabel={'X Axis'}/>\n      <Axis axis={initialState.yAxis} axisLabel={'Y Axis'}/>\n    </Grid>\n  );\n\n\n}\n ","export const AppActionTypes = {\n    toggleTheme: 'TOGGLE_THEME'\n}","import { AppState } from './App.interface';\nimport { AppActionTypes } from './App.actions';\n\n// const appState = JSON.parse(localStorage.getItem('appState'));\n\nexport const initialState = {\n  appTheme: localStorage.getItem('appTheme') || 'darkTheme'\n};\n\nexport function appReducer(state: AppState, action: any): AppState {\n    console.info('appReducer', 'state: ', state, 'action: ', action);\n    switch(action.type) {\n      case AppActionTypes.toggleTheme:\n        const newState = {\n          appTheme: state.appTheme === 'darkTheme' ? 'lightTheme' : 'darkTheme'\n        };\n        return newState;\n      default:\n        throw new Error();\n    };\n}","import React, { useState, createContext, useReducer, FunctionComponent, ReactNode, useContext } from 'react';\nimport { MuiThemeProvider } from '@material-ui/core';\nimport { getThemeByName } from './themes/base';\nimport { AppState } from './App.interface';\nimport { appReducer, initialState } from './App.reducer';\n\nconst AppStateContext = createContext<AppState>(initialState);\n\n\nconst StateProvider = ({ children }: { children: ReactNode }) => {\n    \n  const [state, dispatch] = useReducer(appReducer, initialState);\n\n  console.log(state);\n\n    return (\n        <AppStateContext.Provider value={state}>\n            {children}\n        </AppStateContext.Provider>\n    );\n}\n\nexport { AppStateContext, StateProvider };","import { Theme, createMuiTheme, ThemeOptions } from \"@material-ui/core\";\nimport { lightTheme } from \"./light\";\nimport { darkTheme } from \"./dark\";\n\nexport function getThemeByName(themeKey: string): Theme {\n  const theme: Theme = createMuiTheme({\n    ...themeMap[themeKey],\n    typography: {\n    }\n  });\n\n  theme.typography.body1 = {\n\n    fontSize: '0.8rem',\n    [theme.breakpoints.up('md')]: {\n      fontSize: '1rem',\n    },\n  }\n\n  return theme;\n}\n\nconst themeMap: { [key: string]: Partial<ThemeOptions> } = {\n  lightTheme,\n  darkTheme\n};","import { ThemeOptions } from '@material-ui/core';\n\nexport const lightTheme: Partial<ThemeOptions> = {\n  palette: {\n    type: 'light',\n    primary: {\n      main: '#282c34'\n    }\n  }\n};","import { createMuiTheme, ThemeOptions } from '@material-ui/core';\n\nexport const darkTheme: Partial<ThemeOptions> = {\n  palette: {\n    type: 'dark'\n  }\n};","import React, { useState, useContext, useReducer } from 'react';\nimport PlanetChart from './PlanetChart';\n\nimport confiredExoplanets from './confirmed-explanets.json';\nimport { Planet } from './Planet.interface';\nimport { AXIS_OPTIONS } from './App.constants';\nimport { ControlPanel } from './ControlPanel';\nimport { makeStyles, createStyles, Theme, Grid, withTheme, Paper, Button, MuiThemeProvider, CssBaseline } from '@material-ui/core';\nimport { AppStateContext } from './StateProvider';\nimport WbSunnyRoundedIcon from '@material-ui/icons/WbSunnyRounded';\nimport Brightness3RoundedIcon from '@material-ui/icons/Brightness3Rounded';\nimport { AppState } from './App.interface';\nimport { appReducer, initialState } from './App.reducer';\nimport { AppActionTypes } from './App.actions';\nimport { getThemeByName } from './themes/base';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      fontSize: 'calc(10px + 2vmin)',\n      padding: '1rem'\n    },\n    header: {\n      minHeight: '10vh'\n    },\n    appWrapper: {\n      display: 'flex',\n      justifyContent: 'space-between',\n      flexDirection: 'column',\n      [theme.breakpoints.up('md')]: {\n        flexDirection: 'row-reverse'\n      },\n    }\n  }),\n);\n\n\nexport function App(props: { theme: Theme }) {\n\n  const classes = useStyles();\n\n  const axisProps = {\n    x: AXIS_OPTIONS[0].axes[0],\n    y: AXIS_OPTIONS[1].axes[0]\n  };\n  const globalState = useContext<AppState>(AppStateContext);\n  const [state, dispatch] = useReducer(appReducer, initialState);\n  const theme = getThemeByName(state.appTheme);\n\n  return (\n    <MuiThemeProvider theme={theme}>\n      <CssBaseline />\n      <Grid className={classes.root} container direction=\"column\">\n        <Grid item xs={12}>\n          <Grid container className={classes.header} justify=\"space-between\">\n            <Brightness3RoundedIcon color=\"primary\" aria-label=\"Dark Theme\"\n              onClick={() => dispatch({type: AppActionTypes.toggleTheme})}/>\n            Planet Mapper\n            <WbSunnyRoundedIcon color=\"secondary\" aria-label=\"Light Theme\"\n              onClick={() => dispatch({type: AppActionTypes.toggleTheme})}/>\n          </Grid>\n        </Grid>\n        <Grid item xs={12} className={classes.appWrapper}>\n            <ControlPanel />\n            <PlanetChart planets={confiredExoplanets} axisProps={axisProps} theme={theme} />\n        </Grid>\n      </Grid>\n    </MuiThemeProvider>\n  );\n}\n\nexport default withTheme(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { CssBaseline } from '@material-ui/core';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { StateProvider } from './StateProvider';\n\nReactDOM.render(\n    <StateProvider>\n      <App />\n    </StateProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}