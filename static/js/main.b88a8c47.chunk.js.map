{"version":3,"sources":["PlanetChart.tsx","App.constants.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["PlanetChart","props","internalChart","afterChartCreated","bind","this","addSeries","type","name","color","data","planets","map","p","Number","axisProps","x","attribute","y","chart","className","highcharts","Highcharts","options","chartOptions","callback","React","Component","AXIS_OPTIONS","label","units","App","initialChartOptions","title","text","style","subtitle","useHTML","plotOptions","scatter","marker","radius","states","hover","enabled","lineColor","tooltip","headerFormat","pointFormat","confiredExoplanets","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gz1CAwDeA,G,MArCf,kDAGE,WAAYC,GAAqB,IAAD,8BAC9B,cAAMA,IAHRC,mBAEgC,EAE9B,EAAKC,kBAAoB,EAAKA,kBAAkBC,KAAvB,gBAFK,EAHlC,gEAQuB,IAAD,OAClBC,KAAKH,cAAcI,UAAU,CAC3BC,KAAM,UACNC,KAAM,oBACNC,MAAO,oBACPC,KAAML,KAAKJ,MAAMU,QAAQC,KAAI,SAACC,GAG5B,MAAO,CAFWC,OAAOD,EAAE,EAAKZ,MAAMc,UAAUC,EAAEC,YAChCH,OAAOD,EAAE,EAAKZ,MAAMc,UAAUG,EAAED,oBAf1D,wCAqBoBE,GAChBd,KAAKH,cAAgBiB,IAtBzB,+BA0BM,OAAQ,yBAAKC,UAAU,eACnB,kBAAC,IAAD,CACEC,WAAYC,EACZC,QAASlB,KAAKJ,MAAMuB,aACpBC,SAAWpB,KAAKF,yBA9B5B,GAAiCuB,IAAMC,Y,QCjB1BC,EAA6B,CAAC,CACnCC,MAAO,gBACPZ,UAAW,YACXa,MAAO,kBACR,CACCD,MAAO,mBACPZ,UAAW,UACXa,MAAO,eACR,CACCD,MAAO,+BACPZ,UAAW,aACXa,MAAO,OCyDAC,EA5Df,kDA0CE,WAAY9B,GAAa,IAAD,8BACtB,cAAMA,IAzCRU,QAAoB,GAwCI,EAtCxBI,UAAY,CACVC,EAAGY,EAAa,GAChBV,EAAGU,EAAa,IAoCM,EAlCxBI,oBAA0C,CACxCb,MAAO,CACLZ,KAAM,WAER0B,MAAO,CACHC,KAAK,GAAD,OAAK,EAAKnB,UAAUC,EAAEa,MAAtB,eAAkC,EAAKd,UAAUG,EAAEW,OACvDM,MAAO,CACL1B,MAAO,sBAGb2B,SAAU,CACNF,KAAM,6GACNG,SAAS,GAEbC,YAAa,CACTC,QAAS,CACLC,OAAQ,CACJC,OAAQ,EACRC,OAAQ,CACJC,MAAO,CACHC,SAAS,EACTC,UAAW,sBAIvBC,QAAS,CACLC,aAAc,2BACdC,YAAY,aAAD,OAAe,EAAKjC,UAAUC,EAAEc,MAAhC,uBAAoD,EAAKf,UAAUG,EAAEY,WAS5F,EAAKnB,QAAL,YAAmBsC,GAFG,EA1C1B,qDAiDI,OACE,yBAAK7B,UAAU,OACb,4BAAQA,UAAU,cAAlB,iBAGA,kBAAC,EAAD,CAAaI,aAAcnB,KAAK2B,oBAAqBrB,QAASN,KAAKM,QAASI,UAAWV,KAAKU,iBAtDpG,GAAyBW,IAAMC,WCEXuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b88a8c47.chunk.js","sourcesContent":["import React from 'react';\n\nimport * as Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\n\nimport './PlanetChart.css';\n\nimport { render } from '@testing-library/react';\nimport { Planet } from './Planet.interface';\nimport { AxisOption } from './AxisOption.interface';\n\ninterface PlanetProps {\n  chartOptions: Highcharts.Options,\n  planets: Planet [],\n  axisProps: {\n    x: AxisOption, y: AxisOption\n  }\n};\n\nexport class PlanetChart extends React.Component<PlanetProps> {\n  internalChart: Highcharts.Chart | any;\n\n  constructor(props: PlanetProps) {\n    super(props);\n    this.afterChartCreated = this.afterChartCreated.bind(this);\n  }\n\n  componentDidMount() {\n    this.internalChart.addSeries({\n      type: 'scatter',\n      name: 'Confirmed Planets',\n      color: 'var(--text-color)',\n      data: this.props.planets.map((p) => {\n        const x: number = Number(p[this.props.axisProps.x.attribute]);\n        const y: number = Number(p[this.props.axisProps.y.attribute]);\n        return [x, y];\n      })\n    });\n  }\n\n  afterChartCreated(chart: Highcharts.Chart) {\n    this.internalChart = chart;\n  }\n  \n  render() {\n      return (<div className=\"PlanetChart\">\n          <HighchartsReact\n            highcharts={Highcharts}\n            options={this.props.chartOptions}\n            callback={ this.afterChartCreated }/>\n      </div>\n    );\n  }\n\n}\n\nexport default PlanetChart;\n\n \n ","import { AxisOption } from \"./AxisOption.interface\";\n\nexport const AXIS_OPTIONS: AxisOption[] = [{\n        label: \"Planet's Mass\",\n        attribute: \"pl_bmassj\",\n        units: \"Jupiter Masses\"\n    }, {\n        label: \"Stellar Distance\",\n        attribute: \"st_dist\",\n        units: \"Light Years\"\n    }, {\n        label: \"Planet's Orbital Inclination\",\n        attribute: \"pl_orbincl\",\n        units: null\n    }\n]","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport PlanetChart from './PlanetChart';\nimport { ChartOptions } from 'highcharts';\n\nimport confiredExoplanets from './confirmed-explanets.json';\nimport { Planet } from './Planet.interface';\nimport { AXIS_OPTIONS } from './App.constants';\n\nexport class App extends React.Component {\n\n  planets: Planet[] = [];\n\n  axisProps = {\n    x: AXIS_OPTIONS[0],\n    y: AXIS_OPTIONS[1]\n  };\n  initialChartOptions: Highcharts.Options = {\n    chart: {\n      type: 'scatter'\n    },\n    title: {\n        text: `${this.axisProps.x.label} vs ${this.axisProps.y.label}`,\n        style: {\n          color: 'var(--text-color)'\n        }\n    },\n    subtitle: {\n        text: '<a href=\"https://exoplanetarchive.ipac.caltech.edu/\" target=\"_blank\">exoplanetarchive.ipac.caltech.edu</a>',\n        useHTML: true\n    },\n    plotOptions: {\n        scatter: {\n            marker: {\n                radius: 2,\n                states: {\n                    hover: {\n                        enabled: true,\n                        lineColor: 'rgb(100,100,100)'\n                    }\n                }\n            },\n            tooltip: {\n                headerFormat: '<b>{series.name}</b><br>',\n                pointFormat: `{point.x} ${this.axisProps.x.units}, {point.y} ${this.axisProps.y.units}`\n            }\n        }\n    }\n  };\n\n\n  constructor(props: any) {\n    super(props);\n    this.planets = [...confiredExoplanets];\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          Planet Mapper\n        </header>\n        <PlanetChart chartOptions={this.initialChartOptions} planets={this.planets} axisProps={this.axisProps}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}