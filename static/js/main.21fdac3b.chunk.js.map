{"version":3,"sources":["PlanetChart.tsx","App.constants.ts","Axis.tsx","ControlPanel.tsx","themes/base.ts","themes/light.ts","themes/dark.ts","ThemeProvider.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["PlanetChart","props","internalChart","chartOptions","chart","type","backgroundColor","theme","palette","background","default","legend","itemStyle","color","primary","contrastText","title","text","axisProps","x","label","y","style","margin","subtitle","useHTML","plotOptions","scatter","marker","radius","states","hover","enabled","tooltip","headerFormat","pointFormat","units","afterChartCreated","bind","console","log","this","addSeries","name","data","planets","map","p","Number","attribute","className","highcharts","Highcharts","options","callback","React","Component","withTheme","AXIS_OPTIONS","category","axes","useStyles","makeStyles","createStyles","root","flexGrow","formControl","spacing","minWidth","selectEmpty","marginTop","Axis","useState","axis","setAxis","renderSubList","axisGroup","MenuItem","key","value","classes","FormControl","InputLabel","id","axisLabel","Select","labelId","onChange","event","target","ListSubheader","initialState","xAxis","yAxis","ControlPanel","Grid","container","justify","themeMap","lightTheme","main","darkTheme","ThemeContext","createContext","themeName","ThemeProvider","curThemeName","localStorage","getItem","_setThemeName","themeKey","createMuiTheme","typography","body1","fontSize","breakpoints","up","getThemeByName","Provider","setItem","children","padding","header","minHeight","appWrapper","display","justifyContent","flexDirection","setThemeName","useContext","direction","item","xs","aria-label","onClick","confiredExoplanets","Boolean","window","location","hostname","match","ReactDOM","render","CssBaseline","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.21fdac3b.chunk.js","sourcesContent":["import React, { useContext } from 'react';\n\nimport * as Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\n\nimport { Planet } from './Planet.interface';\nimport { AxisOption } from './AxisOption.interface';\nimport { withTheme, Theme } from '@material-ui/core';\ninterface PlanetProps {\n  theme: Theme,\n  planets: Planet [],\n  axisProps: {\n    x: AxisOption, y: AxisOption\n  }\n};\n\nexport class PlanetChart extends React.Component<PlanetProps> {\n  internalChart: Highcharts.Chart | any;\n\n  chartOptions: Highcharts.Options = {}\n\n  constructor(props: PlanetProps) {\n    super(props);\n    this.chartOptions = {\n      chart: {\n        type: 'scatter',\n        backgroundColor: props.theme.palette.background.default\n      },\n      legend: {\n        itemStyle: {\n          color: props.theme.palette.primary.contrastText\n        }\n      },\n      title: {\n        text: `${props.axisProps.x.label} vs ${props.axisProps.y.label}`,\n        style: {\n          color: props.theme.palette.primary.contrastText\n        },\n        margin: 25\n      },\n      subtitle: {\n        text: `<a style=\"color: ${props.theme.palette.primary.contrastText}; margin: 20px;\" href=\"https://exoplanetarchive.ipac.caltech.edu/\" target=\"_blank\">exoplanetarchive.ipac.caltech.edu</a>`,\n        useHTML: true,\n      },\n      plotOptions: {\n        scatter: {\n          marker: {\n            radius: 2,\n            states: {\n              hover: {\n                enabled: true,\n              }\n            }\n          },\n          tooltip: {\n            headerFormat: '<b>{series.name}</b><br>',\n            pointFormat: `{point.x} ${props.axisProps.x.units}, {point.y} ${props.axisProps.y.units}`\n          }\n        }\n      }\n    };\n    this.afterChartCreated = this.afterChartCreated.bind(this);\n  }\n\n  componentDidMount() {\n    console.log('props: ', this.props);\n    this.internalChart.addSeries({\n      type: 'scatter',\n      name: 'Confirmed Planets',\n      data: this.props.planets.map((p) => {\n        const x: number = Number(p[this.props.axisProps.x.attribute]);\n        const y: number = Number(p[this.props.axisProps.y.attribute]);\n        return [x, y];\n      })\n    });\n  }\n\n  afterChartCreated(chart: Highcharts.Chart) {\n    this.internalChart = chart;\n  }\n  \n  render() {\n    if(this.chartOptions.chart) {\n      this.chartOptions.chart.backgroundColor = this.props.theme.palette.background.default;\n    }\n    return (\n      <div className=\"PlanetChart\">\n        <HighchartsReact\n          highcharts={Highcharts}\n          options={this.chartOptions}\n          callback={ this.afterChartCreated }/>\n      </div>\n    );\n  }\n\n}\n\nexport default withTheme(PlanetChart);\n\n \n ","import { AxisOption, AxisGroup } from \"./AxisOption.interface\";\n\nexport const AXIS_OPTIONS: AxisGroup[] = [\n    {\n        category: \"Planet\",\n        axes: [{\n            label: \"Planet's Mass\",\n            attribute: \"pl_bmassj\",\n            units: \"Jupiter Masses\"\n        }, {\n            label: \"Planet's Orbital Inclination\",\n            attribute: \"pl_orbincl\",\n            units: null\n        }]\n    }, {\n        category: \"Star\",\n        axes: [{\n            label: \"Stellar Distance\",\n            attribute: \"st_dist\",\n            units: \"Light Years\"\n        }]\n    }\n]","import React from 'react';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\n\nimport { AXIS_OPTIONS } from './App.constants';\nimport { AxisGroup, AxisOption } from './AxisOption.interface';\n\n\nimport { makeStyles, createStyles, Theme, ListSubheader, ListItem } from '@material-ui/core';\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n    root: {\n        flexGrow: 1\n    },\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 120,\n    },\n    selectEmpty: {\n        marginTop: theme.spacing(2),\n    },\n    }),\n);\n\n\nexport function Axis(props: {axis: string, axisLabel: string}) {\n    \n    const [axis, setAxis] = React.useState(props.axis);\n    \n    const handleXAxisChange = (attribute: string): void => {\n        setAxis(attribute);\n    };\n    \n    const renderSubList = (axisGroup: AxisGroup) => {\n        if(!axisGroup) { return []; }\n        const menuItems = axisGroup.axes.map((axis: AxisOption) => (\n            <MenuItem key={`${axisGroup.category}-${axis.attribute}`} value={axis.attribute}>{axis.label}</MenuItem>\n        ));\n        return menuItems;\n    };\n\n    const classes = useStyles();\n    return (\n        <div className={classes.root}>\n            <FormControl className={classes.formControl}>\n                <InputLabel id=\"demo-simple-select-label\">{props.axisLabel}</InputLabel>\n                <Select\n                    labelId=\"x-axis-select-label\"\n                    id=\"x-axis-select\"\n                    value={axis}\n                    onChange={event => handleXAxisChange(event.target.value as string)}>\n                        {AXIS_OPTIONS.map((axisGroup: AxisGroup) => ([\n                        <ListSubheader key={axisGroup.category}>{axisGroup.category}</ListSubheader>,\n                        [...renderSubList(axisGroup)]\n                        ])\n                )}\n                </Select>\n            </FormControl>\n        </div>\n    );\n}\n","import React from 'react';\n\n\nimport { makeStyles, createStyles, Theme, ListSubheader, ListItem, Grid } from '@material-ui/core';\nimport { AXIS_OPTIONS } from './App.constants';\nimport { Axis } from './Axis';\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n    },\n    formControl: {\n      margin: theme.spacing(1),\n      minWidth: 120,\n    },\n    selectEmpty: {\n      marginTop: theme.spacing(2),\n    },\n  }),\n);\n\nconst initialState = {\n  xAxis: AXIS_OPTIONS[0].axes[0].attribute,\n  yAxis: AXIS_OPTIONS[1].axes[0].attribute\n}\n\n\nexport function ControlPanel() {\n\n\n  const classes = useStyles();\n  if (!AXIS_OPTIONS) return null;\n  return (\n    <Grid container className={classes.root} justify=\"space-between\">\n      <Axis axis={initialState.xAxis} axisLabel={'X Axis'}/>\n      <Axis axis={initialState.yAxis} axisLabel={'Y Axis'}/>\n    </Grid>\n  );\n\n\n}\n ","import { Theme, createMuiTheme, ThemeOptions } from \"@material-ui/core\";\nimport { lightTheme } from \"./light\";\nimport { darkTheme } from \"./dark\";\n\nexport function getThemeByName(themeKey: string): Theme {\n  const theme: Theme = createMuiTheme({\n    ...themeMap[themeKey],\n    typography: {\n    }\n  });\n\n  theme.typography.body1 = {\n\n    fontSize: '0.8rem',\n    [theme.breakpoints.up('md')]: {\n      fontSize: '1rem',\n    },\n  }\n\n  return theme;\n}\n\nconst themeMap: { [key: string]: Partial<ThemeOptions> } = {\n  lightTheme,\n  darkTheme\n};","import { createMuiTheme, ThemeOptions } from '@material-ui/core';\n\n// export const lightTheme = createMuiTheme({\n//   palette: {\n//     type: 'light',\n//     primary: {\n//       main: '#282c34'\n//     }\n//   }\n// });\n\nexport const lightTheme: Partial<ThemeOptions> = {\n  palette: {\n    type: 'light',\n    primary: {\n      main: '#282c34'\n    }\n  }\n};","import { createMuiTheme, ThemeOptions } from '@material-ui/core';\n\nexport const darkTheme: Partial<ThemeOptions> = {\n  palette: {\n    type: 'dark'\n  }\n};\n\n// export const darkTheme = createMuiTheme(theme);","import React, { useState } from 'react';\nimport { MuiThemeProvider } from '@material-ui/core';\nimport { getThemeByName } from './themes/base';\n\nexport const ThemeContext = React.createContext((themeName: string): void => {\n    \n});\n\n\nconst ThemeProvider: React.FC = (props) => {\n    // State to hold the selected theme name\n    // Read current theme from localStorage or maybe from an api\n    const curThemeName = localStorage.getItem('appTheme') || 'darkTheme';\n\n    // State to hold the selected theme name\n    const [themeName, _setThemeName] = useState(curThemeName);\n\n    // Retrieve the theme object by theme name\n    const theme = getThemeByName(themeName);\n\n    const setThemeName = (themeName: string): void => {\n        localStorage.setItem(\"appTheme\", themeName);\n        _setThemeName(themeName);\n      }\n\n\n    return (\n        <ThemeContext.Provider value={setThemeName}>\n            <MuiThemeProvider theme={theme}>{props.children}</MuiThemeProvider>\n        </ThemeContext.Provider>\n    );\n}\n\nexport default ThemeProvider;","import React, { useState, useContext } from 'react';\nimport PlanetChart from './PlanetChart';\n\nimport confiredExoplanets from './confirmed-explanets.json';\nimport { Planet } from './Planet.interface';\nimport { AXIS_OPTIONS } from './App.constants';\nimport { ControlPanel } from './ControlPanel';\nimport { makeStyles, createStyles, Theme, Grid, withTheme, Paper, Button } from '@material-ui/core';\nimport { ThemeContext} from './ThemeProvider';\nimport WbSunnyRoundedIcon from '@material-ui/icons/WbSunnyRounded';\nimport Brightness3RoundedIcon from '@material-ui/icons/Brightness3Rounded';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      fontSize: 'calc(10px + 2vmin)',\n      padding: '1rem'\n    },\n    header: {\n      minHeight: '10vh'\n    },\n    appWrapper: {\n      display: 'flex',\n      justifyContent: 'space-between',\n      flexDirection: 'column',\n      [theme.breakpoints.up('md')]: {\n        flexDirection: 'row-reverse'\n      },\n    }\n  }),\n);\n\n\nexport function App(props: { theme: Theme }) {\n\n  const classes = useStyles();\n\n  const axisProps = {\n    x: AXIS_OPTIONS[0].axes[0],\n    y: AXIS_OPTIONS[1].axes[0]\n  };\n\n  // State to hold the selected theme name\n  const setThemeName = useContext(ThemeContext);\n\n\n  return (\n    <Grid className={classes.root} container direction=\"column\">\n      <Grid item xs={12}>\n        <Grid container className={classes.header} justify=\"space-between\">\n          <Brightness3RoundedIcon color=\"primary\" aria-label=\"Dark Theme\"\n            onClick={() => setThemeName(\"darkTheme\")}/>\n          Planet Mapper\n          <WbSunnyRoundedIcon color=\"secondary\" aria-label=\"Light Theme\"\n            onClick={() => setThemeName(\"lightTheme\")}/>\n        </Grid>\n      </Grid>\n      <Grid item xs={12} className={classes.appWrapper}>\n          <ControlPanel />\n          <PlanetChart planets={confiredExoplanets} axisProps={axisProps} />\n      </Grid>\n    </Grid>\n  );\n}\n\nexport default withTheme(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { CssBaseline } from '@material-ui/core';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport ThemeProvider from './ThemeProvider';\n\nReactDOM.render(\n    <ThemeProvider>\n      <CssBaseline />\n      <App />\n    </ThemeProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}