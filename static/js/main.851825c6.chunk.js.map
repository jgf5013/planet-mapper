{"version":3,"sources":["App.constants.ts","Axis.service.ts","PlanetChart.tsx","ControlPanel.actions.ts","Axis.tsx","ControlPanel.reducer.ts","ControlPanel.tsx","Theme.actions.ts","Theme.reducer.ts","themes/base.ts","themes/light.ts","themes/dark.ts","TimelineSlider.actions.ts","TimelineSlider.tsx","Planet.service.ts","App.tsx","serviceWorker.ts","TimelineSlider.reducer.ts","App.reducer.ts","index.tsx"],"names":["AXIS_GROUPS","category","axes","label","attribute","units","type","getLabelFromKey","axisAttribute","matchingAxis","some","axisGroup","filter","axisOption","length","PlanetChart","props","internalChart","chartOptions","xAxis","this","controlPanel","yAxis","selectedColorCategory","colorCategory","filterMappedPlanets","planets","p","pl_publ_date","map","x","Number","y","t","Date","comparisonDate","timelineSlider","date","colorCategoriesWithCounts","dateFilter","reduced","reduce","result","currentValue","key","count","Object","values","sort","a","b","getCategoriesWithCounts","mappedColorCategoryCounts","forEach","cc","chart","backgroundColor","theme","palette","background","default","legend","itemStyle","color","text","primary","maxHeight","align","verticalAlign","min","Math","max","plotOptions","scatter","marker","radius","states","hover","enabled","tooltip","headerFormat","pointFormat","series","keys","visiblePlanetsForColor","name","data","highcharts","Highcharts","options","React","Component","connect","state","ControlPanelActionTypes","useStyles","makeStyles","createStyles","root","flexGrow","formControl","margin","spacing","minWidth","selectEmpty","marginTop","dispatch","handleAxisChange","stateKey","value","renderSubList","axis","MenuItem","classes","className","FormControl","InputLabel","id","axisLabel","Select","labelId","onChange","event","target","ListSubheader","initialState","elementContainer","flexDirection","justifyContent","ControlPanel","Grid","container","justify","direction","selectedValue","ThemeActionTypes","appTheme","localStorage","getItem","themeChecked","themeReducer","action","console","info","newState","getThemeByName","themeKey","createMuiTheme","themeMap","typography","body1","fontSize","breakpoints","up","lightTheme","main","darkTheme","TimelineSliderActionTypes","tick","sliderValueChange","d","useEffect","setTimeout","publicationDates","minPublicationDate","maxPublicationDate","Slider","aria-labelledby","getTime","defaultValue","marks","valueLabelFormat","toISOString","slice","http","request","confirmedExoplanets","body","padding","header","minHeight","headerName","appWrapper","display","boxItem","darkIcon","borderRadius","lightIcon","withTheme","useReducer","initialThemeState","themeState","themeDispatch","useState","setPlanets","setPublicationDates","fetchPlanets","then","pubDates","Set","add","Array","from","getDistinctPublicationDate","CssBaseline","item","xs","Switch","checked","icon","aria-label","checkedIcon","inputProps","Box","Boolean","window","location","hostname","match","appReducer","combineReducers","log","newDate","setDate","getDate","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.851825c6.chunk.js","sourcesContent":["import { AxisGroup } from \"./AxisOption.interface\";\n\nexport const AXIS_GROUPS: AxisGroup[] = [\n    {\n        category: \"Planet\",\n        axes: [{\n            label: \"Planet's Mass\",\n            attribute: \"pl_bmassj\",\n            units: \"Jupiter Masses\",\n            type: \"Numeric\"\n        }, {\n            label: \"Planet's Radius\",\n            attribute: \"pl_radj\",\n            units: \"Jupiter Radii\",\n            type: \"Numeric\"\n        }, {\n            label: \"Planet's Density\",\n            attribute: \"pl_dens\",\n            units: \"g/cm³\",\n            type: \"Numeric\"\n        }, {\n            label: \"Planet's Orbital Eccentricity\",\n            attribute: \"pl_orbeccen\",\n            units: null,\n            type: \"Numeric\"\n        }, {\n            label: \"Planet's Orbital Inclination\",\n            attribute: \"pl_orbincl\",\n            units: null,\n            type: \"Numeric\"\n        }, {\n            label: \"Number of Planets in System\",\n            attribute: \"pl_pnum\",\n            units: null,\n            type: \"Numeric\"\n        }, {\n            label: \"Planet's Orbital Period\",\n            attribute: \"pl_orbper\",\n            units: \"Days\",\n            type: \"Numeric\"\n        }, {\n            label: \"Planet's Orbital Period Error 1\",\n            attribute: \"pl_orbpererr1\",\n            units: \"Days\",\n            type: \"Numeric\"\n        }, {\n            label: \"Planet's Orbital Period Error 2\",\n            attribute: \"pl_orbpererr2\",\n            units: \"Days\",\n            type: \"Numeric\"\n        }, {\n            label: \"Planet's Orbital Period Limit Flag\",\n            attribute: \"pl_orbperlim\",\n            units: null,\n            type: \"Numeric\"\n        }, {\n            label: \"Planet's Orbital Period # of Measurements\",\n            attribute: \"pl_orbpern\",\n            units: null,\n            type: \"Numeric\"\n        }]\n    }, {\n        category: \"Star\",\n        axes: [{\n            label: \"Stellar Distance\",\n            attribute: \"st_dist\",\n            units: \"Light Years\",\n            type: \"Numeric\"\n        }, {\n            label: \"Stellar Mass\",\n            attribute: \"st_mass\",\n            units: \"Solar Masses\",\n            type: \"Numeric\"\n        }, {\n            label: \"Stellar Radius\",\n            attribute: \"st_rad\",\n            units: \"Solar Radii\",\n            type: \"Numeric\"\n        }, {\n            label: \"Stellar Optical Magnitude\",\n            attribute: \"st_optmag\",\n            units: \"mag\",\n            type: \"Numeric\"\n        }, {\n            label: \"Right Ascension\",\n            attribute: \"ra\",\n            units: null,\n            type: \"Numeric\"\n        }, {\n            label: \"Declination\",\n            attribute: \"dec\",\n            units: null,\n            type: \"Numeric\"\n        }]\n    }, {\n        category: \"Discovery\",\n        axes: [{\n            label: \"Satellite/Observatory\",\n            attribute: \"pl_facility\",\n            units: null,\n            type: \"Categorical\"\n        }, {\n            label: \"Discovery Year\",\n            attribute: \"rowupdate\", // TODO: Not sure if this is right\n            units: null,\n            type: \"Numeric\"\n        }]\n    }\n];\n","import { AXIS_GROUPS } from './App.constants';\nimport { AxisOption, AxisGroup } from './AxisOption.interface';\nimport { Planet } from './Planet.interface';\n\nexport function getLabelFromKey (axisAttribute: string):AxisOption  {\n    let matchingAxis: AxisOption[] = [];\n    AXIS_GROUPS.some((axisGroup: AxisGroup) => {\n        matchingAxis = axisGroup.axes.filter((axisOption: AxisOption) => {\n            return axisOption.attribute === axisAttribute;\n        });\n        if(matchingAxis.length) {\n            return true;\n        }\n    });\n    return matchingAxis[0];\n\n}\nexport function getCategories(planets: Planet[], axisAttribute: string): string[] {\n    return planets.map(p => p[axisAttribute])\n        .filter((value, index, self) => self.indexOf(value) === index);\n}\n\n// https://learnwithparam.com/blog/how-to-group-by-array-of-objects-using-a-key/\nexport function getCategoriesWithCounts(planets: Planet[], axisAttribute: string, comparisonDate: Date, dateFilter: Function): any[] {\n    let reduced = planets.reduce((result, currentValue) => {\n        if (!result[currentValue[axisAttribute]]) {\n            result[currentValue[axisAttribute]] = {\n                key: currentValue[axisAttribute],\n                count: 0\n            };\n        }\n        if(dateFilter(comparisonDate, currentValue)) {\n            result[currentValue[axisAttribute]].count += 1;\n        }\n        return result;\n        }, {}\n    );\n\n    const reducedSortedValues = Object.values(reduced).sort((a: any, b: any) => (b.count - a.count));\n\n    return reducedSortedValues;\n}","import React, { useContext } from 'react';\n\nimport * as Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\n\n// import './PlanetChart.css';\n\nimport { Planet } from './Planet.interface';\nimport { AxisOption } from './AxisOption.interface';\nimport { Theme, createStyles, makeStyles } from '@material-ui/core';\nimport { ControlPanelState } from './ControlPanel.interface';\nimport { connect } from 'react-redux';\nimport { getLabelFromKey, getCategories, getCategoriesWithCounts } from './Axis.service';\nimport { TimelineSliderState } from './TimelineSlider.interface';\n\n\n// const useStyles = makeStyles((theme: Theme) =>\n//     createStyles({\n//       highchartsLegend: {\n//         minHeight: 100\n//       }\n//     })\n// )\n\ninterface PlanetProps {\n  theme: Theme,\n  planets: Planet [],\n  axisProps: {\n    x: AxisOption, y: AxisOption\n  },\n  controlPanel: ControlPanelState,\n  timelineSlider: TimelineSliderState\n};\n\nexport class PlanetChart extends React.Component<PlanetProps> {\n  internalChart: Highcharts.Chart | any;\n\n  chartOptions: Highcharts.Options = {}\n\n  constructor(props: PlanetProps) {\n    super(props);\n\n  }\n  \n  render() {\n    const xAxis: AxisOption = getLabelFromKey(this.props.controlPanel.xAxis);\n    const yAxis: AxisOption = getLabelFromKey(this.props.controlPanel.yAxis);\n    const selectedColorCategory: string = this.props.controlPanel.colorCategory;\n    const filterMappedPlanets: any[] = this.props.planets\n      .filter(p => p[xAxis.attribute] && p[yAxis.attribute] && typeof p.pl_publ_date !== 'undefined' && p['pl_publ_date']) //filters out null values\n      .map((p) => {\n        const x: number = Number(p[xAxis.attribute]);\n        const y: number = Number(p[yAxis.attribute]);\n        const t: Date = p['pl_publ_date'] ? new Date(p['pl_publ_date']) : new Date();\n        const colorCategory: string = p[selectedColorCategory]\n        return {x, y, t, colorCategory};\n      })\n    // const visiblePlanetsForDate = filterMappedPlanets\n    //   .filter(p => {\n    //     return p.t <= this.props.timelineSlider.date;\n    //   });\n    // const colorCategories: any[] = getCategories(filterMappedPlanets, 'colorCategory');\n    const filterFunction: Function = (date: Date, p: any) => { return p.t <= date };\n    const comparisonDate: Date = this.props.timelineSlider.date;\n    const colorCategoriesWithCounts: any[] = getCategoriesWithCounts(filterMappedPlanets, 'colorCategory', comparisonDate, filterFunction);\n    let mappedColorCategoryCounts = {};\n    colorCategoriesWithCounts.forEach((cc) => { mappedColorCategoryCounts[cc.key] = cc.count });\n    this.chartOptions = {\n      chart: {\n        type: 'scatter',\n        backgroundColor: this.props.theme.palette.background.default\n      },\n      legend: {\n        itemStyle: {\n          color: this.props.theme.palette.text.primary\n        },\n        maxHeight: 100,\n        align: 'center',\n        verticalAlign: 'bottom',\n      },\n      xAxis: {\n        min: Math.min(...filterMappedPlanets.map(p => p.x)),\n        max: Math.max(...filterMappedPlanets.map(p => p.x))\n      },\n      yAxis: {\n        min: Math.min(...filterMappedPlanets.map(p => p.y)),\n        max: Math.max(...filterMappedPlanets.map(p => p.y))\n      },\n      // title: {\n      //   text: `${xAxis.label} vs ${yAxis.label}`,\n      //   style: {\n      //     color: this.props.theme.palette.text.primary\n      //   },\n      //   margin: 25\n      // },\n      // subtitle: {\n      //   text: `<a style=\"color: ${this.props.theme.palette.text.primary}; margin: 20px;\" href=\"https://exoplanetarchive.ipac.caltech.edu/\" target=\"_blank\">exoplanetarchive.ipac.caltech.edu</a>`,\n      //   useHTML: true,\n      // },\n      plotOptions: {\n        scatter: {\n          marker: {\n            radius: 2,\n            states: {\n              hover: {\n                enabled: true,\n              }\n            }\n          },\n          tooltip: {\n            headerFormat: '<b>{series.name}</b><br>',\n            pointFormat: `{point.x} ${xAxis.units}, {point.y} ${yAxis.units}`\n          }\n        }\n      },\n      series: Object.keys(mappedColorCategoryCounts).map((colorCategory) => {\n        const visiblePlanetsForColor = filterMappedPlanets.filter(p => p.colorCategory === colorCategory);\n        return {\n          type: 'scatter',\n          name: `${colorCategory} (${mappedColorCategoryCounts[colorCategory]})`,\n          data: visiblePlanetsForColor,\n          marker: {\n            enabled: mappedColorCategoryCounts[colorCategory] > 0\n          }\n        };\n      })\n    };\n    return (\n      <div>\n        <HighchartsReact\n          highcharts={Highcharts}\n          options={this.chartOptions}/>\n      </div>\n    );\n  }\n\n}\n\n \n \nconst mapStateToProps = (state: any, props: any) => ({\n  ...state,\n  ...props\n});\n\n\n\nexport default connect(mapStateToProps)(PlanetChart)","export const ControlPanelActionTypes = {\n    changeAxis: 'CHANGE_AXIS'\n}","import React, { useReducer } from 'react';\nimport { connect } from 'react-redux';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\n\nimport { AXIS_GROUPS } from './App.constants';\nimport { AxisGroup, AxisOption } from './AxisOption.interface';\n\n\nimport { makeStyles, createStyles, Theme, ListSubheader, ListItem } from '@material-ui/core';\nimport { controlPanelReducer, initialState as initialControlPanelState } from './ControlPanel.reducer';\nimport { ControlPanelActionTypes } from './ControlPanel.actions';\nimport { ControlPanelState } from './ControlPanel.interface';\n// import { appReducer } from './App.reducer';\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            flexGrow: 1\n        },\n        formControl: {\n            margin: theme.spacing(1),\n            minWidth: 120,\n        },\n        selectEmpty: {\n            marginTop: theme.spacing(2),\n        },\n    }),\n);\n\n// interface ControlPanelProps {\n//     axisLabel: string;\n//     selectedValue: string;\n//     stateKey: string;\n// }\n\ninterface ConnectedControlPanelProps {\n    axisLabel: string;\n    controlPanel: ControlPanelState;\n    handleAxisChange: Function;\n    selectedValue: string;\n    stateKey: string;\n    type: string;\n}\n\nconst Axis:React.FC<ConnectedControlPanelProps> = (props) => {\n    \n    const renderSubList = (axisGroup: AxisGroup, type: string) => {\n        if(!axisGroup) { return []; }\n        const menuItems = axisGroup.axes\n            .filter((axis: AxisOption) => (axis.type === type))\n            .map((axis: AxisOption) => (\n                <MenuItem key={`${axisGroup.category}-${axis.attribute}`} value={axis.attribute}>{axis.label}</MenuItem>\n            ));\n        return menuItems;\n    };\n\n    const classes = useStyles();\n    return (\n        <div className={classes.root}>\n            <FormControl className={classes.formControl}>\n                <InputLabel id=\"demo-simple-select-label\">{props.axisLabel}</InputLabel>\n                <Select\n                    labelId=\"axis-select-label\"\n                    id=\"axis-select\"\n                    value={props.controlPanel[props.stateKey]}\n                    onChange={event => props.handleAxisChange(event.target.value as string)}>\n                        {AXIS_GROUPS.map((axisGroup: AxisGroup) => ([\n                        <ListSubheader key={axisGroup.category}>{axisGroup.category}</ListSubheader>,\n                        [...renderSubList(axisGroup, props.type)]\n                        ])\n                )}\n                </Select>\n            </FormControl>\n        </div>\n    );\n}\n\nconst mapStateToProps = (state: ControlPanelState, props: any) => ({\n    ...state,\n    ...props    \n});\n\nconst mapDispatchToProps = (dispatch: Function, props: any) => ({\n    handleAxisChange: (attribute: string): void => { \n        dispatch({\n            type: ControlPanelActionTypes.changeAxis,\n            key: props.stateKey,\n            value: attribute\n        });\n    }\n});\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Axis);","import { ControlPanelActionTypes } from './ControlPanel.actions';\nimport { ControlPanelState } from './ControlPanel.interface';\nimport { AXIS_GROUPS } from './App.constants';\n\n\nexport const initialState: ControlPanelState = {\n    xAxis: AXIS_GROUPS[0].axes[0].attribute,\n    yAxis: AXIS_GROUPS[1].axes[0].attribute,\n    colorCategory: AXIS_GROUPS[2].axes[0].attribute\n};\n\nexport function controlPanelReducer(state: ControlPanelState = initialState, action: any): ControlPanelState {\n  console.log('controlPanelReducer: ', state, action);\n    switch(action.type) {\n      case ControlPanelActionTypes.changeAxis:\n        const newState = {\n          ...state,\n        };\n        newState[action.key] = action.value;\n        console.log('controlPanelReducer: ', state, newState);\n        return newState;\n      default:\n        return state;\n        // throw new Error();\n    };\n}","import React from 'react';\n\nimport { makeStyles, createStyles, Theme, ListSubheader, ListItem, Grid } from '@material-ui/core';\nimport { AXIS_GROUPS } from './App.constants';\nimport Axis from './Axis';\nimport { initialState } from './ControlPanel.reducer';\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {},\n    elementContainer: {\n      flexDirection: 'row',\n      justifyContent: 'space-between'\n    },\n    formControl: {\n      margin: theme.spacing(1),\n      minWidth: 120,\n    },\n    selectEmpty: {\n      marginTop: theme.spacing(2),\n    },\n  }),\n);\n\n\n\nexport function ControlPanel() {\n\n\n  const classes = useStyles();\n  if (!AXIS_GROUPS) return null;\n  return (\n    <Grid container className={classes.root} justify=\"space-between\">\n      <Grid container className={classes.elementContainer} direction=\"column\" justify=\"space-between\">\n        <Axis type=\"Categorical\" stateKey=\"colorCategory\" selectedValue={initialState.colorCategory} axisLabel={'Color'}/>\n      </Grid>\n      <Grid container className={classes.elementContainer} direction=\"column\" justify=\"space-between\">\n        <Axis type=\"Numeric\" stateKey=\"xAxis\" selectedValue={initialState.xAxis} axisLabel={'X Axis'}/>\n        <Axis type=\"Numeric\" stateKey=\"yAxis\" selectedValue={initialState.yAxis} axisLabel={'Y Axis'}/>\n      </Grid>\n    </Grid>\n  );\n\n\n}\n ","export const ThemeActionTypes = {\n    toggleTheme: 'TOGGLE_THEME'\n}","import { ThemeState } from './Theme.interface';\nimport { ThemeActionTypes } from './Theme.actions';\n\nexport const initialState: ThemeState = {\n  appTheme: localStorage.getItem('appTheme') || 'darkTheme',\n  themeChecked: false\n};\n\nexport function themeReducer(state: ThemeState = initialState, action: any): ThemeState {\n    console.info('themeReducer', 'state: ', state, 'action: ', action);\n    switch(action.type) {\n      case ThemeActionTypes.toggleTheme:\n        const newState = {\n          ...state,\n          appTheme: state.appTheme === 'darkTheme' ? 'lightTheme' : 'darkTheme',\n          themeChecked: !state.themeChecked\n        };\n        return newState;\n      default:\n        return state;\n        // throw new Error();\n    };\n};","import { Theme, createMuiTheme, ThemeOptions } from \"@material-ui/core\";\nimport { lightTheme } from \"./light\";\nimport { darkTheme } from \"./dark\";\n\nexport function getThemeByName(themeKey: string): Theme {\n  const theme: Theme = createMuiTheme({\n    ...themeMap[themeKey],\n    typography: {\n    }\n  });\n\n  theme.typography.body1 = {\n\n    fontSize: '0.8rem',\n    [theme.breakpoints.up('md')]: {\n      fontSize: '1rem',\n    },\n  }\n\n  return theme;\n}\n\nconst themeMap: { [key: string]: Partial<ThemeOptions> } = {\n  lightTheme,\n  darkTheme\n};","import { ThemeOptions } from '@material-ui/core';\n\nexport const lightTheme: Partial<ThemeOptions> = {\n  palette: {\n    type: 'light',\n    primary: {\n      main: '#282c34'\n    }\n  }\n};","import { createMuiTheme, ThemeOptions } from '@material-ui/core';\n\nexport const darkTheme: Partial<ThemeOptions> = {\n  palette: {\n    type: 'dark'\n  }\n};","export const TimelineSliderActionTypes = {\n    tick: '[TimelineSlider] TICK',\n    set: '[TimelineSlider] SET'\n}","import React, { useReducer } from 'react';\nimport { connect } from 'react-redux';\n\n\nimport { makeStyles, createStyles, Theme, ListSubheader, ListItem, Slider } from '@material-ui/core';\nimport { TimelineSliderActionTypes } from './TimelineSlider.actions';\nimport { TimelineSliderState } from './TimelineSlider.interface';\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            flexGrow: 1\n        }\n    }),\n);\n\ninterface ConnectedTimelineSliderProps {\n    timelineSlider: TimelineSliderState;\n    tick: Function;\n    sliderValueChange: Function;\n    publicationDates: string[];\n}\n\n\nconst TimelineSlider:React.FC<ConnectedTimelineSliderProps> = (props) => {\n\n    React.useEffect(() => {\n        setTimeout(() => {\n            props.tick()\n        }, 1000);\n    }, []);\n    const classes = useStyles();\n\n    if(!props.publicationDates || !props.publicationDates.length) {\n        return (null);\n    }\n\n    const minPublicationDate = props.publicationDates[0];\n    const maxPublicationDate = props.publicationDates[props.publicationDates.length - 1];\n    return (\n        <div className={classes.root}>\n            <Slider\n                aria-labelledby=\"discrete-slider-always\"\n                min={new Date(minPublicationDate).getTime()}\n                max={new Date(maxPublicationDate).getTime()}\n                defaultValue={new Date(maxPublicationDate).getTime()}\n                marks={[{\n                    value: new Date(minPublicationDate).getTime(),\n                    label: minPublicationDate\n                }, {\n                    value: new Date(maxPublicationDate).getTime(),\n                    label: maxPublicationDate\n                }]}\n                valueLabelFormat={(date) => {\n                    return new Date(date).toISOString().slice(0, 10);\n                }}\n                onChange={(event, value) => props.sliderValueChange(value)}\n                // valueLabelDisplay=\"on\"\n            />\n        </div>\n    );\n}\n\nconst mapStateToProps = (state: TimelineSliderState, props: any) => ({\n    ...state,\n    ...props\n});\n\nconst mapDispatchToProps = (dispatch: Function, props: any) => ({\n    tick: (): void => { \n        dispatch({\n            type: TimelineSliderActionTypes.tick\n        });\n    },\n    sliderValueChange: (d: number): void => {\n        dispatch({\n            type: TimelineSliderActionTypes.set,\n            value: new Date(d)\n        })\n    }\n});\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TimelineSlider);","\nimport { Planet } from './Planet.interface';\nimport confirmedExoplanets from './confirmed-exoplanets.json';\n// import customExoplanets from './custom-exoplanets.json';\n\nexport async function http<T>(\n    request: RequestInfo\n  ): Promise<any> {\n    const body = await confirmedExoplanets;\n    return body;\n  }\n\nexport function getPublicationDateRange(planets: Planet[]): Date[]  {\n    const minDate = new Date(Math.min.apply(Math, planets\n        .map((p: Planet) => {\n            return typeof p.pl_publ_date !== 'undefined' && p.pl_publ_date ? new Date(p.pl_publ_date).getTime() : new Date().getTime();\n        })\n    ));\n    return [minDate, new Date()];\n}\n\nexport function getDistinctPublicationDate(planets: Planet[]): string[] {\n  let pubDates = new Set<string>();\n  planets.forEach((p: Planet) => {\n    if(p.pl_publ_date) {\n      pubDates.add(p.pl_publ_date);\n    }\n  });\n  const sortedSet = Array.from(pubDates).sort();\n  return sortedSet;\n}\n\nexport async function fetchPlanets(): Promise<Planet[]> {\n    const planets: Planet[] = await http<Planet[]>('./confirmed-exoplanets.json');\n\n    return planets;\n}","import React, { useState, useContext, useReducer, useEffect } from 'react';\nimport PlanetChart from './PlanetChart';\n\nimport { Planet } from './Planet.interface';\nimport { AXIS_GROUPS } from './App.constants';\nimport { ControlPanel } from './ControlPanel';\nimport { makeStyles, createStyles, Theme, Grid, withTheme, Paper, Button, MuiThemeProvider, CssBaseline, Switch, Fab, Box, Slider } from '@material-ui/core';\nimport { AppStateContext } from './StateProvider';\nimport WbSunnyRoundedIcon from '@material-ui/icons/WbSunnyRounded';\nimport Brightness3RoundedIcon from '@material-ui/icons/Brightness3Rounded';\nimport { ThemeState } from './Theme.interface';\nimport { themeReducer, initialState as initialThemeState } from './Theme.reducer';\nimport { ThemeActionTypes } from './Theme.actions';\nimport { getThemeByName } from './themes/base';\n// import { appReducer, initialState } from './App.reducer';\nimport { controlPanelReducer, initialState as initialControlPanelState } from './ControlPanel.reducer';\nimport TimelineSlider from './TimelineSlider';\nimport { getPublicationDateRange, fetchPlanets, getDistinctPublicationDate } from './Planet.service';\n\nconst lightTheme = getThemeByName('lightTheme');\nconst darkTheme = getThemeByName('darkTheme');\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      fontSize: 'calc(10px + 2vmin)',\n      padding: '1rem'\n    },\n    header: {\n      minHeight: '10vh'\n    },\n    headerName: {\n      padding: '1vh'\n    },\n    appWrapper: {\n      display: 'flex',\n      justifyContent: 'space-between',\n      flexDirection: 'column',\n      [theme.breakpoints.up('md')]: {\n        flexDirection: 'row-reverse'\n      }\n    },\n    boxItem: {\n      margin: '2vw'\n    },\n    darkIcon: {\n      backgroundColor: darkTheme.palette.background.default,\n      borderRadius: '0.75rem',\n      padding: '5px'\n    },\n    lightIcon: {\n      backgroundColor: lightTheme.palette.background.default,\n      borderRadius: '0.75rem',\n      padding: '5px'\n    }\n  }),\n);\n\n\nexport function App(props: { theme: Theme }) {\n\n  const classes = useStyles();\n\n  // const [state, dispatch] = useReducer(appReducer, initialState);\n  const [themeState, themeDispatch] = useReducer(themeReducer, initialThemeState);\n  const theme = getThemeByName(themeState.appTheme);\n  const [planets, setPlanets] = useState<Planet[]>([]);\n  const [publicationDates, setPublicationDates] = useState<string[]|null>();\n\n  useEffect(() => {\n    fetchPlanets().then((planets: Planet[]) => {\n      setPlanets(planets);\n      const publicationDates = getDistinctPublicationDate(planets);\n      setPublicationDates(publicationDates);\n    });\n  }, []);\n  return (\n    <MuiThemeProvider theme={theme}>\n      <CssBaseline />\n      <Grid className={classes.root} container direction=\"column\">\n      <Grid item xs={12}>\n        <Grid container className={classes.header} justify=\"space-between\">\n          {/* <Grid>just a spacer</Grid> */}\n          <Grid className={classes.headerName} item xs={6}>\n            Planet Mapper\n          </Grid>\n          <Grid>\n            <Switch\n              checked={themeState.themeChecked}\n              onChange={() => themeDispatch({type: ThemeActionTypes.toggleTheme})}\n              icon={<Brightness3RoundedIcon aria-label=\"Dark Theme\" className={classes.lightIcon} />}\n              checkedIcon={<WbSunnyRoundedIcon color=\"secondary\" aria-label=\"Light Theme\" className={classes.darkIcon} />}\n              color=\"primary\"\n              name=\"themeCheck\"\n              inputProps={{ 'aria-label': 'light and dark theme checkbox' }} />\n            </Grid>\n        </Grid>\n      </Grid>\n      <Box className={classes.appWrapper}>\n          <Box className={classes.boxItem}><ControlPanel /></Box>\n          <Box className={classes.boxItem} flexGrow={1}>\n            {planets.length && <PlanetChart planets={planets} theme={theme} />}\n            <TimelineSlider publicationDates={publicationDates} />\n          </Box>\n      </Box>\n      </Grid>\n    </MuiThemeProvider>\n  );\n}\n\nexport default withTheme(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { TimelineSliderActionTypes } from './TimelineSlider.actions';\nimport { TimelineSliderState } from './TimelineSlider.interface';\n\n\nexport const initialState: TimelineSliderState = {\n  date: new Date()\n};\n\nexport function timelineSliderReducer(state: TimelineSliderState = initialState, action: any): TimelineSliderState {\n    switch(action.type) {\n      case TimelineSliderActionTypes.tick:\n        var newDate = new Date();\n        newDate.setDate(state.date.getDate()+1);\n        const newState = {\n          ...state,\n          date: newDate\n        };\n        return newState;\n      case TimelineSliderActionTypes.set:\n        return {\n          ...state,\n          date: action.value\n        };\n      default:\n        return state;\n        // throw new Error();\n    };\n}","import { controlPanelReducer, initialState as initialControlState } from './ControlPanel.reducer';\nimport { timelineSliderReducer, initialState as initialTimelineSliderState } from './TimelineSlider.reducer';\nimport { themeReducer, initialState as initialThemeState } from './Theme.reducer';\nimport { combineReducers } from 'redux';\n\nexport const initialState: any = {\n  theme: initialThemeState,\n  controlPanel: initialControlState,\n  timeslider: initialTimelineSliderState\n}\n\n// This is the combined app-wide reducer containing the full state tree\nexport const appReducer = combineReducers({\n  theme: themeReducer, controlPanel: controlPanelReducer, timelineSlider: timelineSliderReducer\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { CssBaseline } from '@material-ui/core';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { StateProvider, AppStateContext } from './StateProvider';\n\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\n\nimport { appReducer } from './App.reducer';\n\nimport './PlanetChart.css';\n\nconst store = createStore(appReducer);\n\nReactDOM.render(\n    <Provider store={store}>\n      <App />\n    </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}