{"version":3,"sources":["App.actions.ts","ControlPanel.actions.ts","App.constants.ts","ControlPanel.reducer.ts","TimelineSlider.actions.ts","TimelineSlider.reducer.ts","Theme.actions.ts","Theme.reducer.ts","App.reducer.ts","Axis.tsx","TimelineSlider.tsx","ControlPanel.tsx","Planet.service.ts","Axis.service.ts","PlanetChart.tsx","themes/base.ts","themes/light.ts","themes/dark.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["AppActionTypes","ControlPanelActionTypes","AXIS_GROUPS","category","axes","label","attribute","units","type","initialState","xAxis","yAxis","colorCategory","TimelineSliderActionTypes","date","Date","ThemeActionTypes","appTheme","localStorage","getItem","themeChecked","themeReducer","state","action","console","group","log","newState","warn","groupEnd","initialAppState","planets","publicationDates","appReducer","value","combinedAppReducer","combineReducers","app","theme","controlPanel","key","timelineSlider","newDate","setDate","getDate","useStyles","makeStyles","createStyles","root","flexGrow","formControl","margin","spacing","minWidth","selectEmpty","marginTop","connect","props","dispatch","handleAxisChange","stateKey","renderSubList","axisGroup","filter","axis","map","MenuItem","classes","className","FormControl","InputLabel","id","axisLabel","Select","labelId","onChange","event","target","ListSubheader","gridContainer","alignItems","inputDate","top","tick","sliderValueChange","daysSinceMinimum","newSliderDate","moment","add","toDate","length","minPublicationDate","monthsBetween","diff","Grid","container","item","xs","Slider","aria-labelledby","min","max","defaultValue","step","Input","disabled","toISOString","slice","width","heading","fontSize","typography","pxToRem","flexShrink","secondaryHeading","color","palette","text","secondary","elementContainer","flexDirection","justifyContent","React","useState","expanded","setExpanded","useEffect","window","innerWidth","panel","ExpansionPanel","isExpanded","ExpansionPanelSummary","expandIcon","aria-controls","Typography","ExpansionPanelDetails","justify","direction","selectedValue","http","request","a","confirmedExoplanets","body","getLabelFromKey","axisAttribute","matchingAxis","some","axisOption","PlanetChart","internalChart","chartOptions","this","selectedColorCategory","filterMappedPlanets","p","pl_publ_date","x","Number","y","t","dateFilterFunction","comparisonDate","colorCategoriesWithCounts","dateFilter","reduced","reduce","result","currentValue","dateCount","count","Object","values","sort","b","getCategoriesWithCounts","mappedColorCategoryCounts","forEach","cc","chart","backgroundColor","background","default","title","undefined","legend","itemStyle","primary","maxHeight","align","verticalAlign","Math","plotOptions","scatter","marker","radius","states","hover","enabled","tooltip","headerFormat","pointFormat","series","keys","visiblePlanetsForColor","name","data","highcharts","Highcharts","options","Component","getThemeByName","themeKey","createMuiTheme","themeMap","body1","breakpoints","up","lightTheme","main","darkTheme","padding","header","minHeight","headerName","appWrapper","display","boxItem","darkIcon","borderRadius","lightIcon","withTheme","useReducer","initialThemeState","themeState","themeDispatch","appDispatch","fetchPlanets","then","pubDates","Set","Array","from","getDistinctPublicationDate","CssBaseline","Switch","checked","icon","aria-label","checkedIcon","inputProps","Box","Boolean","location","hostname","match","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e8d4563d.chunk.js","sourcesContent":["export const AppActionTypes = {\n    setPlanets: 'SET_PLANETS',\n    setPublicationDates: 'SET_PUBLICATION_DATES'\n}","export const ControlPanelActionTypes = {\n    changeAxis: 'CHANGE_AXIS'\n}","import { AxisGroup } from \"./AxisOption.interface\";\n\nexport const AXIS_GROUPS: AxisGroup[] = [\n    {\n        category: \"Planet\",\n        axes: [{\n            label: \"Planet's Mass\",\n            attribute: \"pl_bmassj\",\n            units: \"Jupiter Masses\",\n            type: \"Numeric\"\n        }, {\n            label: \"Planet's Radius\",\n            attribute: \"pl_radj\",\n            units: \"Jupiter Radii\",\n            type: \"Numeric\"\n        }, {\n            label: \"Planet's Density\",\n            attribute: \"pl_dens\",\n            units: \"g/cm³\",\n            type: \"Numeric\"\n        }, {\n            label: \"Planet's Orbital Eccentricity\",\n            attribute: \"pl_orbeccen\",\n            units: null,\n            type: \"Numeric\"\n        }, {\n            label: \"Planet's Orbital Inclination\",\n            attribute: \"pl_orbincl\",\n            units: null,\n            type: \"Numeric\"\n        }, {\n            label: \"Number of Planets in System\",\n            attribute: \"pl_pnum\",\n            units: null,\n            type: \"Numeric\"\n        }, {\n            label: \"Planet's Orbital Period\",\n            attribute: \"pl_orbper\",\n            units: \"Days\",\n            type: \"Numeric\"\n        }, {\n            label: \"Planet's Orbital Period Error 1\",\n            attribute: \"pl_orbpererr1\",\n            units: \"Days\",\n            type: \"Numeric\"\n        }, {\n            label: \"Planet's Orbital Period Error 2\",\n            attribute: \"pl_orbpererr2\",\n            units: \"Days\",\n            type: \"Numeric\"\n        }, {\n            label: \"Planet's Orbital Period Limit Flag\",\n            attribute: \"pl_orbperlim\",\n            units: null,\n            type: \"Numeric\"\n        }, {\n            label: \"Planet's Orbital Period # of Measurements\",\n            attribute: \"pl_orbpern\",\n            units: null,\n            type: \"Numeric\"\n        }]\n    }, {\n        category: \"Star\",\n        axes: [{\n            label: \"Stellar Distance\",\n            attribute: \"st_dist\",\n            units: \"Light Years\",\n            type: \"Numeric\"\n        }, {\n            label: \"Stellar Mass\",\n            attribute: \"st_mass\",\n            units: \"Solar Masses\",\n            type: \"Numeric\"\n        }, {\n            label: \"Stellar Radius\",\n            attribute: \"st_rad\",\n            units: \"Solar Radii\",\n            type: \"Numeric\"\n        }, {\n            label: \"Stellar Optical Magnitude\",\n            attribute: \"st_optmag\",\n            units: \"mag\",\n            type: \"Numeric\"\n        }, {\n            label: \"Right Ascension\",\n            attribute: \"ra\",\n            units: null,\n            type: \"Numeric\"\n        }, {\n            label: \"Declination\",\n            attribute: \"dec\",\n            units: null,\n            type: \"Numeric\"\n        }]\n    }, {\n        category: \"Discovery\",\n        axes: [{\n            label: \"Satellite/Observatory\",\n            attribute: \"pl_facility\",\n            units: null,\n            type: \"Categorical\"\n        }, {\n            label: \"Discovery Year\",\n            attribute: \"rowupdate\", // TODO: Not sure if this is right\n            units: null,\n            type: \"Numeric\"\n        }]\n    }\n];\n","import { ControlPanelActionTypes } from './ControlPanel.actions';\nimport { ControlPanelState } from './ControlPanel.interface';\nimport { AXIS_GROUPS } from './App.constants';\n\n\nexport const initialState: ControlPanelState = {\n    xAxis: AXIS_GROUPS[0].axes[0].attribute,\n    yAxis: AXIS_GROUPS[1].axes[0].attribute,\n    colorCategory: AXIS_GROUPS[2].axes[0].attribute\n};\n\nexport function controlPanelReducer(state: ControlPanelState = initialState, action: any): ControlPanelState {\n  console.group('controlPanelReducer ', action);\n  console.log('state: ', state);\n  let newState = { ...state };\n  switch(action.type) {\n    case ControlPanelActionTypes.changeAxis:\n      newState[action.key] = action.value;\n      break;\n    default:\n      console.warn('default...');\n      // throw new Error();\n  };\n  console.log('newState: ', newState);\n  console.groupEnd();\n  return newState;\n}","export const TimelineSliderActionTypes = {\n    tick: '[TimelineSlider] TICK',\n    set: '[TimelineSlider] SET'\n}","import { TimelineSliderActionTypes } from './TimelineSlider.actions';\nimport { TimelineSliderState } from './TimelineSlider.interface';\n\n\nexport const initialState: TimelineSliderState = {\n  date: new Date()\n};\n\nexport function timelineSliderReducer(state: TimelineSliderState = initialState, action: any): TimelineSliderState {\n\n    console.group('timelineSliderReducer ', action);\n    console.log('state: ', state);\n    let newState = { ...state };\n    switch(action.type) {\n      case TimelineSliderActionTypes.tick:\n        var newDate = new Date();\n        newDate.setDate(state.date.getDate()+1);\n        newState = {\n          ...newState,\n          date: newDate\n        };\n        break;\n      case TimelineSliderActionTypes.set:\n        newState = {\n          ...newState,\n          date: action.value\n        };\n        break;\n      default:\n        console.warn('default...');\n        // throw new Error();\n    };\n    console.log('newState: ', newState);\n    console.groupEnd();\n    return newState;\n}","export const ThemeActionTypes = {\n    toggleTheme: 'TOGGLE_THEME'\n}","import { ThemeState } from './Theme.interface';\nimport { ThemeActionTypes } from './Theme.actions';\n\nexport const initialState: ThemeState = {\n  appTheme: localStorage.getItem('appTheme') || 'darkTheme',\n  themeChecked: false\n};\n\nexport function themeReducer(state: ThemeState = initialState, action: any): ThemeState {\n  console.group('themeReducer ', action);\n  console.log('state: ', state);\n  let newState = { ...state };\n  switch(action.type) {\n    case ThemeActionTypes.toggleTheme:\n      newState = {\n        ...state,\n        appTheme: state.appTheme === 'darkTheme' ? 'lightTheme' : 'darkTheme',\n        themeChecked: !state.themeChecked\n      };\n      break;\n    default:\n      console.warn('default...');\n      // throw new Error();\n  };\n  console.log('newState: ', newState);\n  console.groupEnd();\n  return newState;\n};","import { AppActionTypes } from './App.actions';\nimport { AppState } from './App.interface';\n// import { planetChartReducer, initialState as initialPlanetChartState } from './PlanetChart.reducer';\nimport { controlPanelReducer, initialState as initialControlState } from './ControlPanel.reducer';\nimport { timelineSliderReducer, initialState as initialTimelineSliderState } from './TimelineSlider.reducer';\nimport { themeReducer, initialState as initialThemeState } from './Theme.reducer';\nimport { combineReducers } from 'redux';\n\nexport const initialAppState: AppState = {\n  planets: [],\n  publicationDates: []\n};\n\nexport function appReducer(state: AppState = initialAppState, action: any): AppState {\n  console.group('appReducer ', action);\n  console.log('state: ', state);\n  let newState = { ...state };\n  switch(action.type) {\n    case AppActionTypes.setPlanets:\n      newState['planets'] = [...action.value]\n      break;\n    case AppActionTypes.setPublicationDates:\n      newState['publicationDates'] = action.value\n      break;\n    default:\n      console.warn('default...');\n      // throw new Error();\n  };\n  console.log('newState: ', newState);\n  console.groupEnd();\n  return newState;\n}\n\nexport const initialCombinedState: any = {\n  app: initialAppState,\n  theme: initialThemeState,\n  controlPanel: initialControlState,\n  timeslider: initialTimelineSliderState\n}\n\n\n// This is the combined app-wide reducer containing the full state tree\nexport const combinedAppReducer = combineReducers({\n  app: appReducer,\n  theme: themeReducer,\n  controlPanel: controlPanelReducer,\n  timelineSlider: timelineSliderReducer\n});","import { createStyles, ListSubheader, makeStyles, Theme } from '@material-ui/core';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { AXIS_GROUPS } from './App.constants';\nimport { AxisGroup, AxisOption } from './AxisOption.interface';\nimport { ControlPanelActionTypes } from './ControlPanel.actions';\nimport { ControlPanelState } from './ControlPanel.interface';\n\n\n\n// import { appReducer } from './App.reducer';\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            flexGrow: 1\n        },\n        formControl: {\n            margin: theme.spacing(1),\n            minWidth: 120,\n        },\n        selectEmpty: {\n            marginTop: theme.spacing(2),\n        },\n    }),\n);\n\n// interface ControlPanelProps {\n//     axisLabel: string;\n//     selectedValue: string;\n//     stateKey: string;\n// }\n\ninterface ConnectedControlPanelProps {\n    axisLabel: string;\n    controlPanel: ControlPanelState;\n    handleAxisChange: Function;\n    selectedValue: string;\n    stateKey: string;\n    type: string;\n}\n\nconst Axis:React.FC<ConnectedControlPanelProps> = (props) => {\n    \n    const renderSubList = (axisGroup: AxisGroup, type: string) => {\n        if(!axisGroup) { return []; }\n        const menuItems = axisGroup.axes\n            .filter((axis: AxisOption) => (axis.type === type))\n            .map((axis: AxisOption) => (\n                <MenuItem key={`${axisGroup.category}-${axis.attribute}`} value={axis.attribute}>{axis.label}</MenuItem>\n            ));\n        return menuItems;\n    };\n\n    const classes = useStyles();\n    return (\n        <div className={classes.root}>\n            <FormControl className={classes.formControl}>\n                <InputLabel id=\"demo-simple-select-label\">{props.axisLabel}</InputLabel>\n                <Select\n                    labelId=\"axis-select-label\"\n                    id=\"axis-select\"\n                    value={props.controlPanel[props.stateKey]}\n                    onChange={event => props.handleAxisChange(event.target.value as string)}>\n                        {AXIS_GROUPS.map((axisGroup: AxisGroup) => ([\n                        <ListSubheader key={axisGroup.category}>{axisGroup.category}</ListSubheader>,\n                        [...renderSubList(axisGroup, props.type)]\n                        ])\n                )}\n                </Select>\n            </FormControl>\n        </div>\n    );\n}\n\nconst mapStateToProps = (state: any, props: any) => ({\n    ...state,\n    ...props    \n});\n\nconst mapDispatchToProps = (dispatch: Function, props: any) => ({\n    handleAxisChange: (attribute: string): void => { \n        dispatch({\n            type: ControlPanelActionTypes.changeAxis,\n            key: props.stateKey,\n            value: attribute\n        });\n    }\n});\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Axis);","import { createStyles, Grid, Input, makeStyles, Slider, Theme } from '@material-ui/core';\nimport CalendarTodayIcon from '@material-ui/icons/CalendarToday';\nimport moment from 'moment';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { AppState } from './App.interface';\nimport { TimelineSliderActionTypes } from './TimelineSlider.actions';\nimport { TimelineSliderState } from './TimelineSlider.interface';\n\n\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        gridContainer: {\n            alignItems: 'center'\n        },\n        inputDate: {\n            top: '-5px'\n        }\n    }),\n);\n\ninterface ConnectedTimelineSliderProps {\n    publicationDates: string[],\n    timelineSlider: TimelineSliderState;\n    tick: Function;\n    sliderValueChange: Function;\n}\n\n\nconst TimelineSlider:React.FC<ConnectedTimelineSliderProps> = (props) => {\n\n    // React.useEffect(() => {\n    //     setTimeout(() => {\n    //         props.tick()\n    //     }, 1000);\n    // }, []);\n    const classes = useStyles();\n    // const [app] = useReducer(appReducer, initialAppState);\n    // console.log('TLS app: ', app);\n    console.log('TLS props: ', props);\n\n    if(!props.publicationDates || !props.publicationDates.length) {\n        return (null);\n    }\n\n    const minPublicationDate = moment(props.publicationDates[0]);\n    const maxPublicationDate = moment(props.publicationDates[props.publicationDates.length - 1]);\n    const today = moment();\n    const monthsBetween = today.diff(minPublicationDate, 'months') + 1;\n    console.log('monthsBetween: ', monthsBetween);\n    return (\n        <Grid container className={classes.gridContainer} spacing={2}>\n            <Grid item xs={1}>\n                <CalendarTodayIcon />\n            </Grid>\n            <Grid item xs={7}>\n                <Slider\n                    aria-labelledby=\"discrete-slider-always\"\n                    min={0}\n                    max={monthsBetween}\n                    defaultValue={monthsBetween}\n                    step={1}\n                    onChange={(event, value) => props.sliderValueChange(value)}\n                />\n            </Grid>\n            <Grid item xs={4}>\n                <Input\n                    className={classes.inputDate}\n                    disabled\n                    value={props.timelineSlider.date.toISOString().slice(0, 10)}/>\n            </Grid>\n        </Grid>\n    );\n}\n\nconst mapStateToProps = (state: any, props: any) => ({\n    ...state,\n    ...props\n});\n\nconst mapDispatchToProps = (dispatch: Function, props: any) => ({\n    tick: (): void => { \n        dispatch({\n            type: TimelineSliderActionTypes.tick\n        });\n    },\n    sliderValueChange: (daysSinceMinimum: number): void => {\n        const newSliderDate = moment(props.publicationDates[0]).add(daysSinceMinimum, 'months');\n        dispatch({\n            type: TimelineSliderActionTypes.set,\n            value: newSliderDate.toDate()\n        })\n    }\n});\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TimelineSlider);","import { createStyles, Grid, makeStyles, Theme, Typography, ExpansionPanel, ExpansionPanelSummary, ExpansionPanelDetails } from '@material-ui/core';\nimport React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { AXIS_GROUPS } from './App.constants';\nimport Axis from './Axis';\nimport { initialState } from './ControlPanel.reducer';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport TimelineSlider from './TimelineSlider';\n\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      width: '100%',\n    },\n    heading: {\n      fontSize: theme.typography.pxToRem(15),\n      flexShrink: 0,\n    },\n    secondaryHeading: {\n      fontSize: theme.typography.pxToRem(15),\n      color: theme.palette.text.secondary,\n    },\n    elementContainer: {\n      flexDirection: 'row',\n      justifyContent: 'space-between'\n    },\n    formControl: {\n      margin: theme.spacing(1),\n      minWidth: 120,\n    },\n    selectEmpty: {\n      marginTop: theme.spacing(2),\n    },\n  }),\n);\n\ninterface ConnectedControlPanelProps {\n  publicationDates: string[],\n}\n\n\nconst ControlPanel:React.FC<ConnectedControlPanelProps> = (props) => {\n\n  const classes = useStyles();\n  const [expanded, setExpanded] = React.useState<string | false>(false);\n\n  useEffect(() => {\n    if(window.innerWidth > 800) {\n      setExpanded('controlPanel');\n    }\n  }, []);\n\n  const handleChange = (panel: string) => (event: React.ChangeEvent<{}>, isExpanded: boolean) => {\n    setExpanded(isExpanded ? panel : false);\n  };\n\n  if (!AXIS_GROUPS) return null;\n  return (\n    <ExpansionPanel expanded={expanded === 'controlPanel'} onChange={handleChange('controlPanel')}>\n      <ExpansionPanelSummary\n        expandIcon={<ExpandMoreIcon />}\n        aria-controls=\"controlPanelbh-content\"\n        id=\"controlPanelbh-header\"\n      >\n        <Typography className={classes.heading} >Axis Controls, etc.</Typography>\n      </ExpansionPanelSummary>\n      <ExpansionPanelDetails>\n          <Grid container className={classes.root} justify=\"space-between\">\n            <Grid container className={classes.elementContainer} direction=\"column\" justify=\"space-between\">\n              <Axis type=\"Categorical\" stateKey=\"colorCategory\" selectedValue={initialState.colorCategory} axisLabel={'Color'}/>\n            </Grid>\n            <Grid container className={classes.elementContainer} direction=\"column\" justify=\"space-between\">\n              <Axis type=\"Numeric\" stateKey=\"xAxis\" selectedValue={initialState.xAxis} axisLabel={'X Axis'}/>\n              <Axis type=\"Numeric\" stateKey=\"yAxis\" selectedValue={initialState.yAxis} axisLabel={'Y Axis'}/>\n            </Grid>\n            <Grid container className={classes.elementContainer} direction=\"column\" justify=\"space-between\">\n              <TimelineSlider publicationDates={props.publicationDates}/>\n            </Grid>\n          </Grid>\n      </ExpansionPanelDetails>\n    </ExpansionPanel>\n  );\n\n}\n\nconst mapStateToProps = (state: any, props: any) => ({\n  ...state,\n  ...props\n});\n\nexport default connect(mapStateToProps)(ControlPanel);\n ","\nimport { Planet } from './Planet.interface';\nimport confirmedExoplanets from './confirmed-exoplanets.json';\n// import customExoplanets from './custom-exoplanets.json';\n\nexport async function http<T>(\n    request: RequestInfo\n  ): Promise<any> {\n    const body = await confirmedExoplanets;\n    return body;\n  }\n\nexport function getPublicationDateRange(planets: Planet[]): Date[]  {\n    const minDate = new Date(Math.min.apply(Math, planets\n        .map((p: Planet) => {\n            return typeof p.pl_publ_date !== 'undefined' && p.pl_publ_date ? new Date(p.pl_publ_date).getTime() : new Date().getTime();\n        })\n    ));\n    return [minDate, new Date()];\n}\n\nexport function getDistinctPublicationDate(planets: Planet[]): string[] {\n  let pubDates = new Set<string>();\n  planets.forEach((p: Planet) => {\n    if(p.pl_publ_date) {\n      pubDates.add(p.pl_publ_date);\n    }\n  });\n  const sortedSet = Array.from(pubDates).sort();\n  return sortedSet;\n}\n\nexport async function fetchPlanets(): Promise<Planet[]> {\n    const planets: Planet[] = await http<Planet[]>('./confirmed-exoplanets.json');\n\n    return planets;\n}","import { AXIS_GROUPS } from './App.constants';\nimport { AxisGroup, AxisOption } from './AxisOption.interface';\nimport { Planet } from './Planet.interface';\n\nexport function getLabelFromKey (axisAttribute: string):AxisOption  {\n    let matchingAxis: AxisOption[] = [];\n    AXIS_GROUPS.some((axisGroup: AxisGroup) => {\n        matchingAxis = axisGroup.axes.filter((axisOption: AxisOption) => {\n            return axisOption.attribute === axisAttribute;\n        });\n        return matchingAxis.length;\n    });\n    return matchingAxis[0];\n\n}\nexport function getCategories(planets: Planet[], axisAttribute: string): string[] {\n    return planets.map(p => p[axisAttribute])\n        .filter((value, index, self) => self.indexOf(value) === index);\n}\n\n// https://learnwithparam.com/blog/how-to-group-by-array-of-objects-using-a-key/\nexport function getCategoriesWithCounts(planets: Planet[], axisAttribute: string, comparisonDate: Date, dateFilter: Function): any[] {\n    let reduced = planets.reduce((result, currentValue) => {\n        if (!result[currentValue[axisAttribute]]) {\n            result[currentValue[axisAttribute]] = {\n                key: currentValue[axisAttribute],\n                dateCount: 0,\n                count: 0\n            };\n        }\n        result[currentValue[axisAttribute]].dateCount += dateFilter(comparisonDate, currentValue) ? 1 : 0;\n        result[currentValue[axisAttribute]].count += 1;\n        return result;\n        }, {}\n    );\n\n    const reducedSortedValues = Object.values(reduced).sort((a: any, b: any) => (b.count - a.count));\n\n    return reducedSortedValues;\n}","import { Theme } from '@material-ui/core';\nimport * as Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { getCategoriesWithCounts, getLabelFromKey } from './Axis.service';\nimport { AxisOption } from './AxisOption.interface';\nimport { ControlPanelState } from './ControlPanel.interface';\nimport { Planet } from './Planet.interface';\nimport { TimelineSliderState } from './TimelineSlider.interface';\n\n\ninterface PlanetProps {\n  theme: Theme,\n  planets: Planet [],\n  axisProps: {\n    x: AxisOption, y: AxisOption\n  },\n  controlPanel: ControlPanelState,\n  timelineSlider: TimelineSliderState\n};\n\nexport class PlanetChart extends React.Component<PlanetProps> {\n  internalChart: Highcharts.Chart | any;\n\n  chartOptions: Highcharts.Options = {}\n\n  \n  render() {\n    const xAxis: AxisOption = getLabelFromKey(this.props.controlPanel.xAxis);\n    const yAxis: AxisOption = getLabelFromKey(this.props.controlPanel.yAxis);\n    const selectedColorCategory: string = this.props.controlPanel.colorCategory;\n    const filterMappedPlanets: any[] = this.props.planets\n      .filter(p => p[xAxis.attribute] && p[yAxis.attribute] && typeof p.pl_publ_date !== 'undefined' && p['pl_publ_date']) //filters out null values\n      .map((p) => {\n        const x: number = Number(p[xAxis.attribute]);\n        const y: number = Number(p[yAxis.attribute]);\n        const t: Date = p['pl_publ_date'] ? new Date(p['pl_publ_date']) : new Date();\n        const colorCategory: string = p[selectedColorCategory]\n        return {x, y, t, colorCategory};\n      })\n    const dateFilterFunction: Function = (date: Date, p: any) => {\n      return p.t <= date\n    };\n    const comparisonDate: Date = this.props.timelineSlider.date;\n    const colorCategoriesWithCounts: any[] = getCategoriesWithCounts(filterMappedPlanets, 'colorCategory', comparisonDate, dateFilterFunction);\n    let mappedColorCategoryCounts = {};\n    colorCategoriesWithCounts.forEach((cc) => { mappedColorCategoryCounts[cc.key] = cc.dateCount });\n    this.chartOptions = {\n      chart: {\n        type: 'scatter',\n        backgroundColor: this.props.theme.palette.background.default\n      },\n      title: undefined,\n      legend: {\n        itemStyle: {\n          color: this.props.theme.palette.text.primary\n        },\n        maxHeight: 100,\n        align: 'center',\n        verticalAlign: 'bottom',\n      },\n      xAxis: {\n        min: Math.min(...filterMappedPlanets.map(p => p.x)),\n        max: Math.max(...filterMappedPlanets.map(p => p.x)),\n        title: {\n          text: `${xAxis.label}${xAxis.units ? ' [' + xAxis.units + ']' : ''}`\n        }\n      },\n      yAxis: {\n        min: Math.min(...filterMappedPlanets.map(p => p.y)),\n        max: Math.max(...filterMappedPlanets.map(p => p.y)),\n        title: {\n          text: `${yAxis.label}${yAxis.units ? ' [' + yAxis.units + ']' : ''}`\n        }\n      },\n      plotOptions: {\n        scatter: {\n          marker: {\n            radius: 2,\n            states: {\n              hover: {\n                enabled: true,\n              }\n            }\n          },\n          tooltip: {\n            headerFormat: '<b>{series.name}</b><br>',\n            pointFormat: `{point.x}${xAxis.units ? ' ' + xAxis.units : ''}, {point.y} ${yAxis.units ? ' ' + yAxis.units : ''}`\n          }\n        }\n      },\n      series: Object.keys(mappedColorCategoryCounts).map((colorCategory) => {\n        const visiblePlanetsForColor = filterMappedPlanets\n          .filter(p => {\n            return (p.colorCategory === colorCategory && dateFilterFunction(comparisonDate, p))\n          });\n        return {\n          type: 'scatter',\n          name: `${colorCategory} (${mappedColorCategoryCounts[colorCategory]})`,\n          data: visiblePlanetsForColor,\n          marker: {\n            enabled: mappedColorCategoryCounts[colorCategory] > 0\n          }\n        };\n      })\n    };\n    return (\n      <div>\n        <HighchartsReact\n          highcharts={Highcharts}\n          options={this.chartOptions}/>\n      </div>\n    );\n  }\n\n}\n\n \n \nconst mapStateToProps = (state: any, props: any) => ({\n  ...state,\n  ...props\n});\n\n\n\nexport default connect(mapStateToProps)(PlanetChart)","import { Theme, createMuiTheme, ThemeOptions } from \"@material-ui/core\";\nimport { lightTheme } from \"./light\";\nimport { darkTheme } from \"./dark\";\n\nexport function getThemeByName(themeKey: string): Theme {\n  const theme: Theme = createMuiTheme({\n    ...themeMap[themeKey],\n    typography: {\n    }\n  });\n\n  theme.typography.body1 = {\n\n    fontSize: '0.8rem',\n    [theme.breakpoints.up('md')]: {\n      fontSize: '1rem',\n    },\n  }\n\n  return theme;\n}\n\nconst themeMap: { [key: string]: Partial<ThemeOptions> } = {\n  lightTheme,\n  darkTheme\n};","import { ThemeOptions } from '@material-ui/core';\n\nexport const lightTheme: Partial<ThemeOptions> = {\n  palette: {\n    type: 'light',\n    primary: {\n      main: '#282c34'\n    }\n  }\n};","import { ThemeOptions } from '@material-ui/core';\n\nexport const darkTheme: Partial<ThemeOptions> = {\n  palette: {\n    type: 'dark'\n  }\n};","import { Box, createStyles, CssBaseline, Grid, makeStyles, MuiThemeProvider, Switch, Theme, withTheme } from '@material-ui/core';\nimport Brightness3RoundedIcon from '@material-ui/icons/Brightness3Rounded';\nimport WbSunnyRoundedIcon from '@material-ui/icons/WbSunnyRounded';\nimport React, { useEffect, useReducer } from 'react';\nimport { connect } from 'react-redux';\nimport { AppActionTypes } from './App.actions';\nimport { AppState } from './App.interface';\nimport { appReducer, initialAppState } from './App.reducer';\nimport ControlPanel from './ControlPanel';\nimport { ControlPanelState } from './ControlPanel.interface';\nimport { Planet } from './Planet.interface';\nimport { fetchPlanets, getDistinctPublicationDate } from './Planet.service';\nimport PlanetChart from './PlanetChart';\nimport { ThemeActionTypes } from './Theme.actions';\nimport { ThemeState } from './Theme.interface';\nimport { initialState as initialThemeState, themeReducer } from './Theme.reducer';\nimport { getThemeByName } from './themes/base';\nimport TimelineSlider from './TimelineSlider';\nimport { TimelineSliderState } from './TimelineSlider.interface';\n\n\nconst lightTheme = getThemeByName('lightTheme');\nconst darkTheme = getThemeByName('darkTheme');\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      fontSize: 'calc(10px + 2vmin)',\n      padding: '1rem'\n    },\n    header: {\n      minHeight: '10vh'\n    },\n    headerName: {\n      padding: '1vh'\n    },\n    appWrapper: {\n      display: 'flex',\n      justifyContent: 'space-between',\n      flexDirection: 'column',\n      [theme.breakpoints.up('md')]: {\n        flexDirection: 'row-reverse'\n      }\n    },\n    boxItem: {\n      margin: '2vw'\n    },\n    darkIcon: {\n      backgroundColor: darkTheme.palette.background.default,\n      borderRadius: '0.75rem',\n      padding: '5px'\n    },\n    lightIcon: {\n      backgroundColor: lightTheme.palette.background.default,\n      borderRadius: '0.75rem',\n      padding: '5px'\n    }\n  }),\n);\ninterface ConnectedAppProps {\n  app: AppState,\n  theme: ThemeState,\n  controlPanel: ControlPanelState,\n  timelineSlider: TimelineSliderState\n}\n\nconst App:React.FC<ConnectedAppProps> = (props) => {\n\n  console.log('App props: ', props);\n\n  const classes = useStyles();\n\n  const [themeState, themeDispatch] = useReducer(themeReducer, initialThemeState);\n  const theme = getThemeByName(themeState.appTheme);\n  const [app, appDispatch] = useReducer(appReducer, initialAppState);\n\n  useEffect(() => {\n    fetchPlanets().then((planets: Planet[]) => {\n      appDispatch({type: AppActionTypes.setPlanets, value: [...planets]});\n      const publicationDates = getDistinctPublicationDate(planets);\n      appDispatch({type: AppActionTypes.setPublicationDates, value: [...publicationDates]});\n    });\n  }, []);\n  return (\n    <MuiThemeProvider theme={theme}>\n      <CssBaseline />\n      <Grid className={classes.root} container direction=\"column\">\n      <Grid item xs={12}>\n        <Grid container className={classes.header} justify=\"space-between\">\n          {/* <Grid>just a spacer</Grid> */}\n          <Grid className={classes.headerName} item xs={6}>\n            Planet Mapper\n          </Grid>\n          <Grid>\n            <Switch\n              checked={themeState.themeChecked}\n              onChange={() => themeDispatch({type: ThemeActionTypes.toggleTheme})}\n              icon={<Brightness3RoundedIcon aria-label=\"Dark Theme\" className={classes.lightIcon} />}\n              checkedIcon={<WbSunnyRoundedIcon color=\"secondary\" aria-label=\"Light Theme\" className={classes.darkIcon} />}\n              color=\"primary\"\n              name=\"themeCheck\"\n              inputProps={{ 'aria-label': 'light and dark theme checkbox' }} />\n            </Grid>\n        </Grid>\n      </Grid>\n      <Box className={classes.appWrapper}>\n          <Box className={classes.boxItem}>\n            <ControlPanel publicationDates={app.publicationDates}/>\n          </Box>\n          <Box className={classes.boxItem} flexGrow={1}>\n            {app.planets.length && <PlanetChart planets={app.planets} theme={theme} />}\n          </Box>\n      </Box>\n      </Grid>\n    </MuiThemeProvider>\n  );\n}\n\nconst mapStateToProps = (state: any, props: any) => ({\n  ...state,\n  ...props\n});\n\nexport default withTheme(connect(mapStateToProps)(App));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport App from './App';\nimport { combinedAppReducer } from './App.reducer';\nimport './PlanetChart.css';\nimport * as serviceWorker from './serviceWorker';\n\n\n\n\n\nconst store = createStore(combinedAppReducer);\n\nReactDOM.render(\n    <Provider store={store}>\n      <App />\n    </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}