{"version":3,"sources":["App.actions.ts","ControlPanel.actions.ts","App.constants.ts","ControlPanel.reducer.ts","TimelineSlider.actions.ts","TimelineSlider.reducer.ts","Theme.actions.ts","Theme.reducer.ts","App.reducer.ts","Axis.tsx","TimelineSlider.tsx","ControlPanel.tsx","Planet.service.ts","Axis.service.ts","PlanetChart.tsx","themes/base.ts","themes/light.ts","themes/dark.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["AppActionTypes","ControlPanelActionTypes","AXIS_GROUPS","category","axes","label","attribute","units","type","initialState","xAxis","yAxis","colorCategory","TimelineSliderActionTypes","dateOffSet","clock","clockState","timelineSliderReducer","state","action","newState","value","Math","min","Number","clearInterval","ThemeActionTypes","appTheme","localStorage","getItem","themeChecked","themeReducer","initialAppState","planets","publicationDates","appReducer","combinedAppReducer","combineReducers","app","theme","controlPanel","key","timelineSlider","useStyles","makeStyles","createStyles","root","flexGrow","formControl","margin","spacing","minWidth","selectEmpty","marginTop","connect","props","dispatch","handleAxisChange","stateKey","classes","className","FormControl","InputLabel","id","axisLabel","Select","labelId","onChange","event","target","map","axisGroup","subList","allowedTypes","filter","axis","indexOf","MenuItem","renderSubList","length","ListSubheader","gridContainer","alignItems","inputDate","top","handleReplay","yearsBetween","moment","diff","runningTimer","setInterval","handlePlay","handlePause","stopClock","sliderValueChange","daysBeforeToday","useReducer","initialTimelineSliderState","ClockButton","minPublicationDate","sliderDate","add","onClick","Grid","container","item","xs","Slider","aria-labelledby","max","defaultValue","step","Input","disabled","toISOString","slice","width","heading","fontSize","typography","pxToRem","flexShrink","secondaryHeading","color","palette","text","secondary","elementContainer","flexDirection","justifyContent","React","useState","expanded","setExpanded","useEffect","window","innerWidth","panel","ExpansionPanel","isExpanded","ExpansionPanelSummary","expandIcon","aria-controls","Typography","ExpansionPanelDetails","justify","direction","selectedValue","http","request","a","confirmedExoplanets","body","getLabelFromKey","axisAttribute","matchingAxis","some","axisOption","HC_more","Highcharts","PlanetChart","internalChart","chartOptions","this","selectedColorCategory","filterMappedPlanets","p","pl_publ_date","name","x","isNaN","Date","y","z","t","dateFilterFunction","date","comparisonDate","toDate","colorCategoriesWithCounts","dateFilter","reduced","reduce","result","currentValue","dateCount","count","Object","values","sort","b","getCategoriesWithCounts","mappedColorCategoryCounts","forEach","cc","chart","zoomType","backgroundColor","background","default","title","undefined","legend","itemStyle","primary","maxHeight","align","verticalAlign","tooltip","useHTML","headerFormat","pointFormat","footerFormat","followPointer","plotOptions","bubble","minSize","maxSize","series","keys","visiblePlanetsForColor","data","marker","enabled","highcharts","options","Component","getThemeByName","themeKey","createMuiTheme","themeMap","body1","breakpoints","up","lightTheme","main","darkTheme","padding","header","minHeight","headerName","appWrapper","display","boxItem","darkIcon","borderRadius","lightIcon","withTheme","initialThemeState","themeState","themeDispatch","appDispatch","fetchPlanets","then","pubDates","Set","Array","from","getDistinctPublicationDate","CssBaseline","Switch","checked","icon","aria-label","checkedIcon","inputProps","Box","Boolean","location","hostname","match","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.39c352b1.chunk.js","sourcesContent":["export const AppActionTypes = {\n    setPlanets: 'SET_PLANETS',\n    setPublicationDates: 'SET_PUBLICATION_DATES'\n}","export const ControlPanelActionTypes = {\n    changeAxis: 'CHANGE_AXIS'\n}","import { AxisGroup } from \"./AxisOption.interface\";\n\nexport const AXIS_GROUPS: AxisGroup[] = [\n    {\n        category: \"Planet\",\n        axes: [{\n            label: \"Planet's Mass\",\n            attribute: \"pl_bmassj\",\n            units: \"Jupiter Masses\",\n            type: \"Numeric\"\n        }, {\n            label: \"Planet's Radius\",\n            attribute: \"pl_radj\",\n            units: \"Jupiter Radii\",\n            type: \"Numeric\"\n        }, {\n            label: \"Planet's Density\",\n            attribute: \"pl_dens\",\n            units: \"g/cm³\",\n            type: \"Numeric\"\n        }, {\n            label: \"Planet's Orbital Eccentricity\",\n            attribute: \"pl_orbeccen\",\n            units: null,\n            type: \"Numeric\"\n        }, {\n            label: \"Planet's Orbital Inclination\",\n            attribute: \"pl_orbincl\",\n            units: null,\n            type: \"Numeric\"\n        }, {\n            label: \"Number of Planets in System\",\n            attribute: \"pl_pnum\",\n            units: null,\n            type: \"Numeric\"\n        }, {\n            label: \"Planet's Orbital Period\",\n            attribute: \"pl_orbper\",\n            units: \"Days\",\n            type: \"Numeric\"\n        }, {\n            label: \"Planet's Orbital Period Error 1\",\n            attribute: \"pl_orbpererr1\",\n            units: \"Days\",\n            type: \"Numeric\"\n        }, {\n            label: \"Planet's Orbital Period Error 2\",\n            attribute: \"pl_orbpererr2\",\n            units: \"Days\",\n            type: \"Numeric\"\n        }, {\n            label: \"Planet's Orbital Period # of Measurements\",\n            attribute: \"pl_orbpern\",\n            units: null,\n            type: \"Numeric\"\n        }]\n    }, {\n        category: \"Star\",\n        axes: [{\n            label: \"Stellar Distance\",\n            attribute: \"st_dist\",\n            units: \"Light Years\",\n            type: \"Numeric\"\n        }, {\n            label: \"Stellar Mass\",\n            attribute: \"st_mass\",\n            units: \"Solar Masses\",\n            type: \"Numeric\"\n        }, {\n            label: \"Stellar Radius\",\n            attribute: \"st_rad\",\n            units: \"Solar Radii\",\n            type: \"Numeric\"\n        }, {\n            label: \"Stellar Optical Magnitude\",\n            attribute: \"st_optmag\",\n            units: \"mag\",\n            type: \"Numeric\"\n        }, {\n            label: \"Right Ascension\",\n            attribute: \"ra\",\n            units: null,\n            type: \"Numeric\"\n        }, {\n            label: \"Declination\",\n            attribute: \"dec\",\n            units: null,\n            type: \"Numeric\"\n        }]\n    }, {\n        category: \"Discovery\",\n        axes: [{\n            label: \"Satellite/Observatory\",\n            attribute: \"pl_facility\",\n            units: null,\n            type: \"Categorical\"\n        }, {\n            label: \"Discovery Date\",\n            attribute: \"pl_publ_date\", // TODO: Not sure if this is right\n            units: null,\n            type: \"Date\"\n        }]\n    }\n];\n","import { ControlPanelActionTypes } from './ControlPanel.actions';\nimport { ControlPanelState } from './ControlPanel.interface';\nimport { AXIS_GROUPS } from './App.constants';\n\n\nexport const initialState: ControlPanelState = {\n    xAxis: AXIS_GROUPS[0].axes[0].attribute,\n    yAxis: AXIS_GROUPS[1].axes[0].attribute,\n    colorCategory: AXIS_GROUPS[2].axes[0].attribute\n};\n\nexport function controlPanelReducer(state: ControlPanelState = initialState, action: any): ControlPanelState {\n  // console.group('controlPanelReducer ', action);\n  // console.log('state: ', state);\n  let newState = { ...state };\n  switch(action.type) {\n    case ControlPanelActionTypes.changeAxis:\n      newState[action.key] = action.value;\n      break;\n  };\n  // console.log('newState: ', newState);\n  // console.groupEnd();\n  return newState;\n}","export const TimelineSliderActionTypes = {\n    playClock: '[TimelineSlider] START_CLOCK',\n    pauseClock: '[TimelineSlider] PAUSE_CLOCK',\n    stopClock: '[TimelineSlider] STOP_CLOCK',\n    tick: '[TimelineSlider] TICK',\n    set: '[TimelineSlider] SET'\n}","import { TimelineSliderActionTypes } from './TimelineSlider.actions';\nimport { TimelineSliderState } from './TimelineSlider.interface';\n\n\nexport const initialState: TimelineSliderState = {\n  dateOffSet: 0,\n  clock: null,\n  clockState: 'STOPPED'\n};\n\nexport function timelineSliderReducer(state: TimelineSliderState = initialState, action: any): TimelineSliderState {\n\n\n\n    // console.group('timelineSliderReducer ', action);\n    // console.log('state: ', state);\n    let newState = { ...state };\n    switch(action.type) {\n      case TimelineSliderActionTypes.playClock:\n        newState = {\n          ...newState,\n          clock: action.value,\n          clockState: 'RUNNING'\n        };\n        break;\n      case TimelineSliderActionTypes.tick:\n        newState = {\n          ...newState,\n          dateOffSet: Math.min(\n            newState.clockState === 'RUNNING' ? Number(state.dateOffSet) + 1 : Number(state.dateOffSet), //negative #\n            0\n          ),\n          clockState: 'RUNNING'\n        };\n        break;\n      case TimelineSliderActionTypes.set:\n        newState = {\n          ...newState,\n          dateOffSet: Number(action.value)\n        };\n        break;\n      case TimelineSliderActionTypes.pauseClock:\n        newState = {\n          ...newState,\n          clockState: 'PAUSED'\n        };\n        break;\n      case TimelineSliderActionTypes.stopClock:\n        clearInterval(newState.clock);\n        newState = {\n          ...newState,\n          clock: null,\n          clockState: 'STOPPED'\n        };\n        break;\n    };\n    // console.log('newState: ', newState);\n    // console.groupEnd();\n    return newState;\n}","export const ThemeActionTypes = {\n    toggleTheme: 'TOGGLE_THEME'\n}","import { ThemeState } from './Theme.interface';\nimport { ThemeActionTypes } from './Theme.actions';\n\nexport const initialState: ThemeState = {\n  appTheme: localStorage.getItem('appTheme') || 'darkTheme',\n  themeChecked: false\n};\n\nexport function themeReducer(state: ThemeState = initialState, action: any): ThemeState {\n  // console.group('themeReducer ', action);\n  // console.log('state: ', state);\n  let newState = { ...state };\n  switch(action.type) {\n    case ThemeActionTypes.toggleTheme:\n      newState = {\n        ...state,\n        appTheme: state.appTheme === 'darkTheme' ? 'lightTheme' : 'darkTheme',\n        themeChecked: !state.themeChecked\n      };\n      break;\n  };\n  // console.log('newState: ', newState);\n  // console.groupEnd();\n  return newState;\n};","import { AppActionTypes } from './App.actions';\nimport { AppState } from './App.interface';\n// import { planetChartReducer, initialState as initialPlanetChartState } from './PlanetChart.reducer';\nimport { controlPanelReducer, initialState as initialControlState } from './ControlPanel.reducer';\nimport { timelineSliderReducer, initialState as initialTimelineSliderState } from './TimelineSlider.reducer';\nimport { themeReducer, initialState as initialThemeState } from './Theme.reducer';\nimport { combineReducers } from 'redux';\n\nexport const initialAppState: AppState = {\n  planets: [],\n  publicationDates: []\n};\n\nexport function appReducer(state: AppState = initialAppState, action: any): AppState {\n  // console.group('appReducer ', action);\n  // console.log('state: ', state);\n  let newState = { ...state };\n  switch(action.type) {\n    case AppActionTypes.setPlanets:\n      newState['planets'] = [...action.value]\n      break;\n    case AppActionTypes.setPublicationDates:\n      newState['publicationDates'] = action.value\n      break;\n  };\n  // console.log('newState: ', newState);\n  // console.groupEnd();\n  return newState;\n}\n\nexport const initialCombinedState: any = {\n  app: initialAppState,\n  theme: initialThemeState,\n  controlPanel: initialControlState,\n  timeslider: initialTimelineSliderState\n}\n\n\n// This is the combined app-wide reducer containing the full state tree\nexport const combinedAppReducer = combineReducers({\n  app: appReducer,\n  theme: themeReducer,\n  controlPanel: controlPanelReducer,\n  timelineSlider: timelineSliderReducer\n});","import { createStyles, ListSubheader, makeStyles, Theme } from '@material-ui/core';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { AXIS_GROUPS } from './App.constants';\nimport { AxisGroup, AxisOption } from './AxisOption.interface';\nimport { ControlPanelActionTypes } from './ControlPanel.actions';\nimport { ControlPanelState } from './ControlPanel.interface';\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            flexGrow: 1\n        },\n        formControl: {\n            margin: theme.spacing(1),\n            minWidth: 120,\n        },\n        selectEmpty: {\n            marginTop: theme.spacing(2),\n        },\n    }),\n);\n\ninterface ConnectedControlPanelProps {\n    axisLabel: string;\n    controlPanel: ControlPanelState;\n    handleAxisChange: Function;\n    selectedValue: string;\n    stateKey: string;\n    allowedTypes: string[];\n}\n\nconst Axis:React.FC<ConnectedControlPanelProps> = (props) => {\n    \n    const renderSubList = (axisGroup: AxisGroup, allowedTypes: string[]) => {\n        if(!axisGroup) { return []; }\n        const menuItems = axisGroup.axes\n            .filter((axis: AxisOption) => (allowedTypes.indexOf(axis.type) > -1))\n            .map((axis: AxisOption) => (\n                <MenuItem key={`${axisGroup.category}-${axis.attribute}`} value={axis.attribute}>{axis.label}</MenuItem>\n            ));\n        return menuItems;\n    };\n\n    const classes = useStyles();\n    return (\n        <div className={classes.root}>\n            <FormControl className={classes.formControl}>\n                <InputLabel id=\"demo-simple-select-label\">{props.axisLabel}</InputLabel>\n                <Select\n                    labelId=\"axis-select-label\"\n                    id=\"axis-select\"\n                    value={props.controlPanel[props.stateKey]}\n                    onChange={event => props.handleAxisChange(event.target.value as string)}>\n                    {AXIS_GROUPS.map((axisGroup: AxisGroup) => {\n                        let subList = renderSubList(axisGroup, props.allowedTypes);\n                        if (subList.length) {\n                            return ([\n                                <ListSubheader key={axisGroup.category}>{axisGroup.category}</ListSubheader>,\n                                [...subList]\n                            ]);\n                        }\n                    })}\n                </Select>\n            </FormControl>\n        </div>\n    );\n}\n\nconst mapStateToProps = (state: any, props: any) => ({\n    ...state,\n    ...props    \n});\n\nconst mapDispatchToProps = (dispatch: Function, props: any) => ({\n    handleAxisChange: (attribute: string): void => {\n        if(!attribute) { return; }\n        dispatch({\n            type: ControlPanelActionTypes.changeAxis,\n            key: props.stateKey,\n            value: attribute\n        });\n    }\n});\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Axis);","import { createStyles, Grid, Input, makeStyles, Slider, Theme } from '@material-ui/core';\nimport CalendarTodayIcon from '@material-ui/icons/CalendarToday';\nimport moment from 'moment';\nimport React, { useReducer } from 'react';\nimport { connect } from 'react-redux';\nimport { TimelineSliderActionTypes } from './TimelineSlider.actions';\nimport { TimelineSliderState } from './TimelineSlider.interface';\nimport ReplayIcon from '@material-ui/icons/Replay';\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\nimport PauseIcon from '@material-ui/icons/Pause';\nimport { timelineSliderReducer, initialState as initialTimelineSliderState } from './TimelineSlider.reducer';\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        gridContainer: {\n            alignItems: 'center'\n        },\n        inputDate: {\n            top: '-5px'\n        }\n    }),\n);\n\n\ninterface ConnectedTimelineSliderProps {\n    publicationDates: string[],\n    timelineSlider: TimelineSliderState;\n    tick: Function;\n    sliderValueChange: Function;\n    handleReplay: Function;\n    handlePlay: Function;\n    handlePause: Function;\n    stopClock: Function;\n}\n\n\nconst TimelineSlider:React.FC<ConnectedTimelineSliderProps> = (props) => {\n\n    const classes = useStyles();\n\n    const [timelineSlider] = useReducer(timelineSliderReducer, initialTimelineSliderState);\n\n    if(!props.publicationDates || !props.publicationDates.length) {\n        return (null);\n    }\n\n    const minPublicationDate = moment(props.publicationDates[0]);\n    const today = moment();\n    const yearsBetween = today.diff(minPublicationDate, 'years');\n    const sliderDate = moment().add(props.timelineSlider.dateOffSet, 'years');\n\n    let ClockButton;\n    if(timelineSlider.clockState === 'STOPPED') {\n        ClockButton = <span onClick={event => props.handleReplay()}><ReplayIcon /></span>;\n    } else if(timelineSlider.clockState === 'PAUSED') {\n        ClockButton = <span onClick={event => props.handlePlay()}><PlayArrowIcon /></span>;\n    } else if(timelineSlider.clockState === 'RUNNING') {\n        ClockButton = <span onClick={event => props.handlePause()}><PauseIcon /></span>;\n    }\n\n    // TODO: This should really be handled in the mapped dispatch functions\n    if(props.timelineSlider.dateOffSet >= 0) {\n        clearInterval(props.timelineSlider.clock);\n    }\n    return (\n        <Grid container className={classes.gridContainer} spacing={2}>\n            <Grid item xs={1}>\n                <CalendarTodayIcon />\n            </Grid>\n            <Grid item xs={7}>\n                <Slider\n                    aria-labelledby=\"discrete-slider-always\"\n                    min={-yearsBetween}\n                    max={0}\n                    value={props.timelineSlider.dateOffSet}\n                    defaultValue={0}\n                    step={1}\n                    onChange={(event, value) => {\n                        props.sliderValueChange(value);\n                    }}\n                />\n            </Grid>\n            <Grid item xs={4}>\n                <Input\n                    className={classes.inputDate}\n                    disabled\n                    value={sliderDate.toISOString().slice(0, 10)}/>\n                {ClockButton}\n            </Grid>\n        </Grid>\n    );\n}\n\nconst mapStateToProps = (state: any, props: any) => {\n    return {\n        ...state,\n        ...props\n    };\n};\n\nconst mapDispatchToProps = (dispatch: Function, props: any) => ({\n    handleReplay: (): void => {\n        const yearsBetween = moment().diff(props.publicationDates[0], 'years');\n        dispatch({\n            type: TimelineSliderActionTypes.set,\n            value: -yearsBetween\n        });\n        const runningTimer = setInterval(() => {\n            dispatch({\n                type: TimelineSliderActionTypes.tick\n            });\n\n        }, 100);\n\n        dispatch({\n            type: TimelineSliderActionTypes.playClock,\n            value: runningTimer\n        });\n    },\n    handlePlay: (): void => {\n        const runningTimer = setInterval(() => {\n            dispatch({\n                type: TimelineSliderActionTypes.tick\n            });\n            // props.stopClock();\n        }, 100);\n\n        dispatch({\n            type: TimelineSliderActionTypes.playClock,\n            value: runningTimer\n        });\n    },\n    handlePause: (): void => {\n        dispatch({\n            type: TimelineSliderActionTypes.pauseClock\n        })\n    },\n    stopClock: (clock: number): void => {\n        clearInterval(clock);\n        dispatch({\n            type: TimelineSliderActionTypes.stopClock\n        });\n    },\n    sliderValueChange: (daysBeforeToday: number): void => {\n        dispatch({\n            type: TimelineSliderActionTypes.set,\n            value: daysBeforeToday\n        });\n    }\n});\n\n// export default TimelineSlider;\nexport default connect(mapStateToProps, mapDispatchToProps)(TimelineSlider);","import { createStyles, Grid, makeStyles, Theme, Typography, ExpansionPanel, ExpansionPanelSummary, ExpansionPanelDetails } from '@material-ui/core';\nimport React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { AXIS_GROUPS } from './App.constants';\nimport Axis from './Axis';\nimport { initialState } from './ControlPanel.reducer';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport TimelineSlider from './TimelineSlider';\n\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      width: '100%',\n    },\n    heading: {\n      fontSize: theme.typography.pxToRem(15),\n      flexShrink: 0,\n    },\n    secondaryHeading: {\n      fontSize: theme.typography.pxToRem(15),\n      color: theme.palette.text.secondary,\n    },\n    elementContainer: {\n      flexDirection: 'row',\n      justifyContent: 'space-between'\n    },\n    formControl: {\n      margin: theme.spacing(1),\n      minWidth: 120,\n    },\n    selectEmpty: {\n      marginTop: theme.spacing(2),\n    },\n  }),\n);\n\ninterface ConnectedControlPanelProps {\n  publicationDates: string[],\n}\n\n\nconst ControlPanel:React.FC<ConnectedControlPanelProps> = (props) => {\n\n  const classes = useStyles();\n  const [expanded, setExpanded] = React.useState<string | false>(false);\n\n  useEffect(() => {\n    if(window.innerWidth > 800) {\n      setExpanded('controlPanel');\n    }\n  }, []);\n\n  const handleChange = (panel: string) => (event: React.ChangeEvent<{}>, isExpanded: boolean) => {\n    setExpanded(isExpanded ? panel : false);\n  };\n\n  if (!AXIS_GROUPS) return null;\n  return (\n    <ExpansionPanel expanded={expanded === 'controlPanel'} onChange={handleChange('controlPanel')}>\n      <ExpansionPanelSummary\n        expandIcon={<ExpandMoreIcon />}\n        aria-controls=\"controlPanelbh-content\"\n        id=\"controlPanelbh-header\"\n      >\n        <Typography className={classes.heading} >Axis Controls, etc.</Typography>\n      </ExpansionPanelSummary>\n      <ExpansionPanelDetails>\n          <Grid container className={classes.root} justify=\"space-between\">\n            <Grid container className={classes.elementContainer} direction=\"column\" justify=\"space-between\">\n              <Axis allowedTypes=\"[Categorical]\" stateKey=\"colorCategory\" selectedValue={initialState.colorCategory} axisLabel={'Color'}/>\n            </Grid>\n            <Grid container className={classes.elementContainer} direction=\"column\" justify=\"space-between\">\n              <Axis allowedTypes=\"[Numeric, Date]\" stateKey=\"xAxis\" selectedValue={initialState.xAxis} axisLabel={'X Axis'}/>\n              <Axis allowedTypes=\"[Numeric]\" stateKey=\"yAxis\" selectedValue={initialState.yAxis} axisLabel={'Y Axis'}/>\n            </Grid>\n            <Grid container className={classes.elementContainer} direction=\"column\" justify=\"space-between\">\n              <TimelineSlider publicationDates={props.publicationDates}/>\n            </Grid>\n          </Grid>\n      </ExpansionPanelDetails>\n    </ExpansionPanel>\n  );\n\n}\n\nconst mapStateToProps = (state: any, props: any) => ({\n  ...state,\n  ...props\n});\n\nexport default connect(mapStateToProps)(ControlPanel);\n ","\nimport { Planet } from './Planet.interface';\nimport confirmedExoplanets from './confirmed-exoplanets.json';\n// import customExoplanets from './custom-exoplanets.json';\n\nexport async function http<T>(\n    request: RequestInfo\n  ): Promise<any> {\n    const body = await confirmedExoplanets;\n    return body;\n  }\n\nexport function getPublicationDateRange(planets: Planet[]): Date[]  {\n    const minDate = new Date(Math.min.apply(Math, planets\n        .map((p: Planet) => {\n            return typeof p.pl_publ_date !== 'undefined' && p.pl_publ_date ? new Date(p.pl_publ_date).getTime() : new Date().getTime();\n        })\n    ));\n    return [minDate, new Date()];\n}\n\nexport function getDistinctPublicationDate(planets: Planet[]): string[] {\n  let pubDates = new Set<string>();\n  planets.forEach((p: Planet) => {\n    if(p.pl_publ_date) {\n      pubDates.add(p.pl_publ_date);\n    }\n  });\n  const sortedSet = Array.from(pubDates).sort();\n  return sortedSet;\n}\n\nexport async function fetchPlanets(): Promise<Planet[]> {\n    const planets: Planet[] = await http<Planet[]>('./confirmed-exoplanets.json');\n\n    return planets;\n}","import { AXIS_GROUPS } from './App.constants';\nimport { AxisGroup, AxisOption } from './AxisOption.interface';\nimport { Planet } from './Planet.interface';\n\nexport function getLabelFromKey (axisAttribute: string): AxisOption  {\n    let matchingAxis: AxisOption[] = [];\n    AXIS_GROUPS.some((axisGroup: AxisGroup) => {\n        matchingAxis = axisGroup.axes.filter((axisOption: AxisOption) => {\n            return axisOption.attribute === axisAttribute;\n        });\n        return matchingAxis.length;\n    });\n    return matchingAxis[0];\n\n}\nexport function getCategories(planets: Planet[], axisAttribute: string): string[] {\n    return planets.map(p => p[axisAttribute])\n        .filter((value, index, self) => self.indexOf(value) === index);\n}\n\n// https://learnwithparam.com/blog/how-to-group-by-array-of-objects-using-a-key/\nexport function getCategoriesWithCounts(planets: Planet[], axisAttribute: string, comparisonDate: Date, dateFilter: Function): any[] {\n    let reduced = planets.reduce((result, currentValue) => {\n        if (!result[currentValue[axisAttribute]]) {\n            result[currentValue[axisAttribute]] = {\n                key: currentValue[axisAttribute],\n                dateCount: 0,\n                count: 0\n            };\n        }\n        result[currentValue[axisAttribute]].dateCount += dateFilter(comparisonDate, currentValue) ? 1 : 0;\n        result[currentValue[axisAttribute]].count += 1;\n        return result;\n        }, {}\n    );\n\n    const reducedSortedValues = Object.values(reduced).sort((a: any, b: any) => (b.count - a.count));\n\n    return reducedSortedValues;\n}","import { Theme } from '@material-ui/core';\nimport * as Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\n\nimport moment from 'moment';\n\nimport HC_more from 'highcharts/highcharts-more' //module\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { getCategoriesWithCounts, getLabelFromKey } from './Axis.service';\nimport { AxisOption } from './AxisOption.interface';\nimport { ControlPanelState } from './ControlPanel.interface';\nimport { Planet } from './Planet.interface';\nimport { TimelineSliderState } from './TimelineSlider.interface';\n\n\nHC_more(Highcharts) //init module\n\ninterface PlanetProps {\n  theme: Theme,\n  planets: Planet [],\n  axisProps: {\n    x: AxisOption, y: AxisOption\n  },\n  controlPanel: ControlPanelState,\n  timelineSlider: TimelineSliderState\n};\n\nexport class PlanetChart extends React.Component<PlanetProps> {\n  internalChart: Highcharts.Chart | any;\n\n  chartOptions: Highcharts.Options = {}\n\n  \n  render() {\n    const xAxis: AxisOption = getLabelFromKey(this.props.controlPanel.xAxis);\n    const yAxis: AxisOption = getLabelFromKey(this.props.controlPanel.yAxis);\n    const selectedColorCategory: string = this.props.controlPanel.colorCategory;\n    const filterMappedPlanets: any[] = this.props.planets\n      .filter(p => p[xAxis.attribute] && p[yAxis.attribute] && typeof p.pl_publ_date !== 'undefined' && p['pl_publ_date']) //filters out null values\n      .map((p) => {\n        const name: string = p['pl_name'];\n        const x: any = isNaN(p[xAxis.attribute]) ? new Date(p[xAxis.attribute]) : Number(p[xAxis.attribute]);\n        const y: any = isNaN(p[yAxis.attribute]) ? new Date(p[yAxis.attribute]) : Number(p[yAxis.attribute]);\n\n        const z: number = Number(p['pl_radj'])\n        const t: Date = p['pl_publ_date'] ? new Date(p['pl_publ_date']) : new Date();\n        const colorCategory: string = p[selectedColorCategory]\n        return {name, x, y, z, t, colorCategory};\n      })\n    const dateFilterFunction: Function = (date: Date, p: any) => {\n      return p.t <= date\n    };\n    const comparisonDate: Date = moment().add(this.props.timelineSlider.dateOffSet, 'years').toDate();\n    const colorCategoriesWithCounts: any[] = getCategoriesWithCounts(filterMappedPlanets, 'colorCategory', comparisonDate, dateFilterFunction);\n    let mappedColorCategoryCounts = {};\n    colorCategoriesWithCounts.forEach((cc) => { mappedColorCategoryCounts[cc.key] = cc.dateCount });\n    this.chartOptions = {\n      chart: {\n        type: 'bubble',\n        zoomType: 'xy',\n        backgroundColor: this.props.theme.palette.background.default\n      },\n      title: undefined,\n      legend: {\n        itemStyle: {\n          color: this.props.theme.palette.text.primary\n        },\n        maxHeight: 100,\n        align: 'center',\n        verticalAlign: 'bottom',\n      },\n      xAxis: {\n        type: xAxis.type === 'Date' ? 'datetime' : 'linear',\n        min: Math.min(...filterMappedPlanets.map(p => p.x)),\n        max: Math.max(...filterMappedPlanets.map(p => p.x)),\n        title: {\n          text: `${xAxis.label}${xAxis.units ? ' [' + xAxis.units + ']' : ''}`\n        }\n      },\n      yAxis: {\n        type: yAxis.type === 'Date' ? 'datetime' : 'linear',\n        min: Math.min(...filterMappedPlanets.map(p => p.y)),\n        max: Math.max(...filterMappedPlanets.map(p => p.y)),\n        title: {\n          text: `${yAxis.label}${yAxis.units ? ' [' + yAxis.units + ']' : ''}`\n        }\n      },\n      tooltip: {\n          useHTML: true,\n          headerFormat: '<table>',\n          pointFormat: `\n              <tr><th colspan=\"2\"><h3>{point.name}</h3></th></tr>\n              <tr><th>${xAxis.label}</th><td>{point.x}${xAxis.units ? ' [' + xAxis.units + ']' : ''}</td></tr>\n              <tr><th>${yAxis.label}</th><td>{point.y}${yAxis.units ? ' [' + yAxis.units + ']' : ''}</td></tr>\n              <tr><th>Radius</th><td>{point.z} Jupiter Masses</td></tr>`,\n          footerFormat: '</table>',\n          followPointer: false\n      },\n      plotOptions: {\n        bubble: {\n          minSize: '1%',\n          maxSize: '10%'\n        }\n      },\n      series: Object.keys(mappedColorCategoryCounts).map((colorCategory) => {\n        const visiblePlanetsForColor = filterMappedPlanets\n          .filter(p => {\n            return (p.colorCategory === colorCategory && dateFilterFunction(comparisonDate, p))\n          });\n        return {\n          type: 'bubble',\n          name: `${colorCategory} (${mappedColorCategoryCounts[colorCategory]})`,\n          data: visiblePlanetsForColor,\n          marker: {\n            enabled: mappedColorCategoryCounts[colorCategory] > 0\n          }\n        };\n      })\n    };\n    return (\n      <div>\n        <HighchartsReact\n          highcharts={Highcharts}\n          options={this.chartOptions}/>\n      </div>\n    );\n  }\n\n}\n\n \n \nconst mapStateToProps = (state: any, props: any) => ({\n  ...state,\n  ...props\n});\n\n\n\nexport default connect(mapStateToProps)(PlanetChart)","import { Theme, createMuiTheme, ThemeOptions } from \"@material-ui/core\";\nimport { lightTheme } from \"./light\";\nimport { darkTheme } from \"./dark\";\n\nexport function getThemeByName(themeKey: string): Theme {\n  const theme: Theme = createMuiTheme({\n    ...themeMap[themeKey],\n    typography: {\n    }\n  });\n\n  theme.typography.body1 = {\n\n    fontSize: '0.8rem',\n    [theme.breakpoints.up('md')]: {\n      fontSize: '1rem',\n    },\n  }\n\n  return theme;\n}\n\nconst themeMap: { [key: string]: Partial<ThemeOptions> } = {\n  lightTheme,\n  darkTheme\n};","import { ThemeOptions } from '@material-ui/core';\n\nexport const lightTheme: Partial<ThemeOptions> = {\n  palette: {\n    type: 'light',\n    primary: {\n      main: '#282c34'\n    }\n  }\n};","import { ThemeOptions } from '@material-ui/core';\n\nexport const darkTheme: Partial<ThemeOptions> = {\n  palette: {\n    type: 'dark'\n  }\n};","import { Box, createStyles, CssBaseline, Grid, makeStyles, MuiThemeProvider, Switch, Theme, withTheme } from '@material-ui/core';\nimport Brightness3RoundedIcon from '@material-ui/icons/Brightness3Rounded';\nimport WbSunnyRoundedIcon from '@material-ui/icons/WbSunnyRounded';\nimport React, { useEffect, useReducer } from 'react';\nimport { connect } from 'react-redux';\nimport { AppActionTypes } from './App.actions';\nimport { AppState } from './App.interface';\nimport { appReducer, initialAppState } from './App.reducer';\nimport ControlPanel from './ControlPanel';\nimport { ControlPanelState } from './ControlPanel.interface';\nimport { Planet } from './Planet.interface';\nimport { fetchPlanets, getDistinctPublicationDate } from './Planet.service';\nimport PlanetChart from './PlanetChart';\nimport { ThemeActionTypes } from './Theme.actions';\nimport { ThemeState } from './Theme.interface';\nimport { initialState as initialThemeState, themeReducer } from './Theme.reducer';\nimport { getThemeByName } from './themes/base';\nimport { TimelineSliderState } from './TimelineSlider.interface';\n\n\nconst lightTheme = getThemeByName('lightTheme');\nconst darkTheme = getThemeByName('darkTheme');\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      fontSize: 'calc(10px + 2vmin)',\n      padding: '1rem'\n    },\n    header: {\n      minHeight: '10vh'\n    },\n    headerName: {\n      padding: '1vh'\n    },\n    appWrapper: {\n      display: 'flex',\n      justifyContent: 'space-between',\n      flexDirection: 'column',\n      [theme.breakpoints.up('md')]: {\n        flexDirection: 'row-reverse'\n      }\n    },\n    boxItem: {\n      margin: '2vw'\n    },\n    darkIcon: {\n      backgroundColor: darkTheme.palette.background.default,\n      borderRadius: '0.75rem',\n      padding: '5px'\n    },\n    lightIcon: {\n      backgroundColor: lightTheme.palette.background.default,\n      borderRadius: '0.75rem',\n      padding: '5px'\n    }\n  }),\n);\ninterface ConnectedAppProps {\n  app: AppState,\n  theme: ThemeState,\n  controlPanel: ControlPanelState,\n  timelineSlider: TimelineSliderState\n}\n\nconst App:React.FC<ConnectedAppProps> = (props) => {\n\n  // console.log('App props: ', props);\n\n  const classes = useStyles();\n\n  const [themeState, themeDispatch] = useReducer(themeReducer, initialThemeState);\n  const theme = getThemeByName(themeState.appTheme);\n  const [app, appDispatch] = useReducer(appReducer, initialAppState);\n\n  useEffect(() => {\n    fetchPlanets().then((planets: Planet[]) => {\n      appDispatch({type: AppActionTypes.setPlanets, value: [...planets]});\n      const publicationDates = getDistinctPublicationDate(planets);\n      appDispatch({type: AppActionTypes.setPublicationDates, value: [...publicationDates]});\n    });\n  }, []);\n  return (\n    <MuiThemeProvider theme={theme}>\n      <CssBaseline />\n      <Grid className={classes.root} container direction=\"column\">\n      <Grid item xs={12}>\n        <Grid container className={classes.header} justify=\"space-between\">\n          {/* <Grid>just a spacer</Grid> */}\n          <Grid className={classes.headerName} item xs={6}>\n            Planet Mapper\n          </Grid>\n          <Grid>\n            <Switch\n              checked={themeState.themeChecked}\n              onChange={() => themeDispatch({type: ThemeActionTypes.toggleTheme})}\n              icon={<Brightness3RoundedIcon aria-label=\"Dark Theme\" className={classes.lightIcon} />}\n              checkedIcon={<WbSunnyRoundedIcon color=\"secondary\" aria-label=\"Light Theme\" className={classes.darkIcon} />}\n              color=\"primary\"\n              name=\"themeCheck\"\n              inputProps={{ 'aria-label': 'light and dark theme checkbox' }} />\n            </Grid>\n        </Grid>\n      </Grid>\n      <Box className={classes.appWrapper}>\n          <Box className={classes.boxItem}>\n            <ControlPanel publicationDates={app.publicationDates}/>\n          </Box>\n          <Box className={classes.boxItem} flexGrow={1}>\n            {app.planets.length && <PlanetChart planets={app.planets} theme={theme} />}\n          </Box>\n      </Box>\n      </Grid>\n    </MuiThemeProvider>\n  );\n}\n\nconst mapStateToProps = (state: any, props: any) => ({\n  ...state,\n  ...props\n});\n\nexport default withTheme(connect(mapStateToProps)(App));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport App from './App';\nimport { combinedAppReducer } from './App.reducer';\nimport './PlanetChart.css';\nimport * as serviceWorker from './serviceWorker';\n\n\n\n\n\nconst store = createStore(combinedAppReducer);\n\nReactDOM.render(\n    <Provider store={store}>\n      <App />\n    </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}